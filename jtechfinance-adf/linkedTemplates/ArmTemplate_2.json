{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "jtechfinance-adf"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/abs_csv_cleansed_celeste')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_jtechfinance_dev",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Practice"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "sales_data",
						"fileSystem": "clensed"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "OnlineRetailer",
						"type": "String"
					},
					{
						"name": "SalesMonth",
						"type": "String"
					},
					{
						"name": "Title",
						"type": "String"
					},
					{
						"name": "Vintage",
						"type": "String"
					},
					{
						"name": "Variety",
						"type": "String"
					},
					{
						"name": "Score",
						"type": "String"
					},
					{
						"name": "ListPrice",
						"type": "String"
					},
					{
						"name": "Quantity",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/abs_csv_cleansed_celeste_errorrows_ex5')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_jtechfinance_dev",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Practice"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "clensed"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "OnlineRetailer",
						"type": "String"
					},
					{
						"name": "SalesMonth",
						"type": "String"
					},
					{
						"name": "Title",
						"type": "String"
					},
					{
						"name": "Vintage",
						"type": "String"
					},
					{
						"name": "Variety",
						"type": "String"
					},
					{
						"name": "Score",
						"type": "String"
					},
					{
						"name": "ListPrice",
						"type": "String"
					},
					{
						"name": "Quantity",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/abs_csv_cleansed_celeste_ex3')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_jtechfinance_dev",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Practice"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "sales_data",
						"fileSystem": "clensed"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "OnlineRetailer",
						"type": "String"
					},
					{
						"name": "SalesMonth",
						"type": "String"
					},
					{
						"name": "Title",
						"type": "String"
					},
					{
						"name": "Vintage",
						"type": "String"
					},
					{
						"name": "Variety",
						"type": "String"
					},
					{
						"name": "Score",
						"type": "String"
					},
					{
						"name": "ListPrice",
						"type": "String"
					},
					{
						"name": "Quantity",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/abs_csv_cleansed_error_sink_ex6')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_jtechfinance_dev",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Practice"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "error_sink_csv",
						"fileSystem": "clensed"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/abs_csv_cleansed_error_sink_ex6_2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_jtechfinance_dev",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Practice"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "error_sink.csv",
						"fileSystem": "clensed"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/abs_csv_cleansed_error_srouce_ex6')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_jtechfinance_dev",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Practice"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "error_file.csv",
						"fileSystem": "clensed"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Col1",
						"type": "String"
					},
					{
						"name": "Col2",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/abs_csv_cleansed_masterdata_v2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_jtechfinance_dev",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Practice"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "masterdata",
						"fileSystem": "clensed"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/abs_csv_cleansed_stage')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_jtechfinance_dev",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FolderName": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					},
					"Delimiter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Practice/08. Exercise"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().FolderName",
							"type": "Expression"
						},
						"fileSystem": "clensed"
					},
					"columnDelimiter": {
						"value": "@dataset().Delimiter",
						"type": "Expression"
					},
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/abs_csv_raw_Celeste_ex')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_jtechfinance_dev",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Practice"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Celeste_2022_01.csv",
						"folderPath": "sampledata/Celeste",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "TransactionId",
						"type": "String"
					},
					{
						"name": "TransactionDate",
						"type": "String"
					},
					{
						"name": "OnlineRetailer",
						"type": "String"
					},
					{
						"name": "SalesMonth",
						"type": "String"
					},
					{
						"name": "SalesRegion",
						"type": "String"
					},
					{
						"name": "SalesCurrency",
						"type": "String"
					},
					{
						"name": "Title",
						"type": "String"
					},
					{
						"name": "Vintage",
						"type": "String"
					},
					{
						"name": "Variety",
						"type": "String"
					},
					{
						"name": "Score",
						"type": "String"
					},
					{
						"name": "ListPrice",
						"type": "String"
					},
					{
						"name": "Quantity",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/abs_csv_raw_celeste')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_jtechfinance_dev",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Practice"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "sampledata/Celeste",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "TransactionId",
						"type": "String"
					},
					{
						"name": "TransactionDate",
						"type": "String"
					},
					{
						"name": "OnlineRetailer",
						"type": "String"
					},
					{
						"name": "SalesMonth",
						"type": "String"
					},
					{
						"name": "SalesRegion",
						"type": "String"
					},
					{
						"name": "SalesCurrency",
						"type": "String"
					},
					{
						"name": "Title",
						"type": "String"
					},
					{
						"name": "Vintage",
						"type": "String"
					},
					{
						"name": "Variety",
						"type": "String"
					},
					{
						"name": "Score",
						"type": "String"
					},
					{
						"name": "ListPrice",
						"type": "String"
					},
					{
						"name": "Quantity",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/abs_csv_raw_celeste_ex3')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_jtechfinance_dev",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Practice"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Celeste_2022_09.csv",
						"folderPath": "sampledata/Celeste",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "TransactionId",
						"type": "String"
					},
					{
						"name": "TransactionDate",
						"type": "String"
					},
					{
						"name": "OnlineRetailer",
						"type": "String"
					},
					{
						"name": "SalesMonth",
						"type": "String"
					},
					{
						"name": "SalesRegion",
						"type": "String"
					},
					{
						"name": "SalesCurrency",
						"type": "String"
					},
					{
						"name": "Title",
						"type": "String"
					},
					{
						"name": "Vintage",
						"type": "String"
					},
					{
						"name": "Variety",
						"type": "String"
					},
					{
						"name": "Score",
						"type": "String"
					},
					{
						"name": "ListPrice",
						"type": "String"
					},
					{
						"name": "Quantity",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/abs_csv_raw_cleased_sales')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_jtechfinance_dev",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Practice/02. Exercise"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "sales_data",
						"fileSystem": "clensed"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/abs_csv_raw_masterdata')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_jtechfinance_dev",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Practice"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "sampledata/MasterData",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "CurrencyCode",
						"type": "String"
					},
					{
						"name": "CurrencyName",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/abs_csv_raw_sales')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_jtechfinance_dev",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Practice/02. Exercise"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "sampledata/Arancione",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "OnlineRetailer",
						"type": "String"
					},
					{
						"name": "SalesMonth",
						"type": "String"
					},
					{
						"name": "Title",
						"type": "String"
					},
					{
						"name": "Vintage",
						"type": "String"
					},
					{
						"name": "Variety",
						"type": "String"
					},
					{
						"name": "Score",
						"type": "String"
					},
					{
						"name": "ListPrice",
						"type": "String"
					},
					{
						"name": "Quantity",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/abs_json_raw_Verde_param')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_jtechfinance_dev",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Practice"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": "sampledata/Verde",
						"fileSystem": "raw"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"YearMonth": {
							"type": "string"
						},
						"StoreName": {
							"type": "string"
						},
						"Sales": {
							"type": "object",
							"properties": {
								"Product": {
									"type": "string"
								},
								"Vintage": {
									"type": "string"
								},
								"Variety": {
									"type": "string"
								},
								"Score": {
									"type": "string"
								},
								"SalesPrice": {
									"type": "string"
								},
								"SalesQty": {
									"type": "string"
								}
							}
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ads_json_raw_Verde')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_jtechfinance_dev",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Practice"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "sampledata/Verde",
						"fileSystem": "raw"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"YearMonth": {
							"type": "string"
						},
						"StoreName": {
							"type": "string"
						},
						"Sales": {
							"type": "object",
							"properties": {
								"Product": {
									"type": "string"
								},
								"Vintage": {
									"type": "string"
								},
								"Variety": {
									"type": "string"
								},
								"Score": {
									"type": "string"
								},
								"SalesPrice": {
									"type": "string"
								},
								"SalesQty": {
									"type": "string"
								}
							}
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/zip_destination')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_jtechfinance_dev",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Practice/01. Exercise"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "raw"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/zip_source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_jtechfinance_dev",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Practice/01. Exercise"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "sampledata.zip",
						"fileSystem": "landing"
					},
					"compression": {
						"type": "ZipDeflate"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/db_Build_dimStore')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Practice"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "sql_stage_store",
								"type": "DatasetReference"
							},
							"name": "stageStore"
						},
						{
							"dataset": {
								"referenceName": "sql_dim_store",
								"type": "DatasetReference"
							},
							"name": "sourceDimStore"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sql_dim_store",
								"type": "DatasetReference"
							},
							"name": "dimStore"
						}
					],
					"transformations": [
						{
							"name": "checkStoreExists"
						},
						{
							"name": "setInsertUpdateDates"
						},
						{
							"name": "UpdateOrInsert"
						}
					],
					"scriptLines": [
						"source(output(",
						"          StoreName as string,",
						"          StoreType as string,",
						"          Description as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> stageStore",
						"source(output(",
						"          StoreId as integer,",
						"          StoreName as string,",
						"          StoreType as string,",
						"          Description as string,",
						"          InsertedDate as timestamp,",
						"          UpdatedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> sourceDimStore",
						"stageStore, sourceDimStore lookup(stageStore@StoreName == sourceDimStore@StoreName,",
						"     multiple: true,",
						"     broadcast: 'auto')~> checkStoreExists",
						"checkStoreExists derive(InsertedDate = iif(isNull(InsertedDate),currentTimestamp(),InsertedDate),",
						"          UpdatedDate = currentTimestamp()) ~> setInsertUpdateDates",
						"setInsertUpdateDates alterRow(upsertIf(true())) ~> UpdateOrInsert",
						"UpdateOrInsert sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          StoreId as integer,",
						"          StoreName as string,",
						"          StoreType as string,",
						"          Description as string,",
						"          InsertedDate as timestamp,",
						"          UpdatedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['StoreName'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          StoreName = stageStore@StoreName,",
						"          StoreType = stageStore@StoreType,",
						"          Description = stageStore@Description,",
						"          InsertedDate,",
						"          UpdatedDate",
						"     )) ~> dimStore"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_build_dimProduct')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Practice"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "sql_stage_product_table",
								"type": "DatasetReference"
							},
							"name": "stageProduct"
						},
						{
							"dataset": {
								"referenceName": "ProductDimension",
								"type": "DatasetReference"
							},
							"name": "sourceDimProduct"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "dimProduct",
								"type": "DatasetReference"
							},
							"name": "InsertNewProducts"
						},
						{
							"dataset": {
								"referenceName": "dimProduct",
								"type": "DatasetReference"
							},
							"name": "setInactiveProduct"
						},
						{
							"dataset": {
								"referenceName": "ProductDimension",
								"type": "DatasetReference"
							},
							"name": "setActiveRows"
						}
					],
					"transformations": [
						{
							"name": "activeDimProduct"
						},
						{
							"name": "newAndOldProduct"
						},
						{
							"name": "newProducts"
						},
						{
							"name": "setNewRecordFields"
						},
						{
							"name": "Type2ChangeExists"
						},
						{
							"name": "setInactiveRow"
						},
						{
							"name": "setInactiveRowUpdates"
						},
						{
							"name": "flagUpdates"
						},
						{
							"name": "setActiveRow"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ProductNo as string,",
						"          Country as string,",
						"          Score as string,",
						"          DealerPrice as integer,",
						"          Markup as double,",
						"          ListPrice as integer,",
						"          Province as string,",
						"          Region_1 as string,",
						"          Title as string,",
						"          Vintage as integer,",
						"          Varietal as string,",
						"          Winery as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> stageProduct",
						"source(output(",
						"          ProductId as integer,",
						"          ProductNo as string,",
						"          ProductName as string,",
						"          Province as string,",
						"          Region as string,",
						"          Type as string,",
						"          Winery as string,",
						"          Vintage as integer,",
						"          Score as integer,",
						"          DealerPrice as integer,",
						"          Markup as double,",
						"          ListPrice as integer,",
						"          UpdatedDate as timestamp,",
						"          IsRowCurrent as integer,",
						"          EffectiveDate as timestamp,",
						"          EndDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> sourceDimProduct",
						"sourceDimProduct filter(IsRowCurrent == 1) ~> activeDimProduct",
						"stageProduct, activeDimProduct join(stageProduct@ProductNo == sourceDimProduct@ProductNo,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> newAndOldProduct",
						"newAndOldProduct split(isNull(sourceDimProduct@ProductNo),",
						"     stageProduct@ProductNo == sourceDimProduct@ProductNo && toInteger(stageProduct@Score) == sourceDimProduct@Score,",
						"     disjoint: false) ~> newProducts@(NewProducts, NoUpdateProducts, UpdateProducts)",
						"newProducts@NewProducts derive(UpdatedDate = currentTimestamp(),",
						"          IsRowCurrent = 1,",
						"          EffectiveDate = currentTimestamp(),",
						"          EndDate = toDate('2099-12-31')) ~> setNewRecordFields",
						"newProducts@UpdateProducts, activeDimProduct exists(equals(newProducts@UpdateProducts@ProductNo, sourceDimProduct@ProductNo) &&\r",
						"(toInteger(newProducts@UpdateProducts@Score) != sourceDimProduct@Score),",
						"     negate:false,",
						"     broadcast: 'auto')~> Type2ChangeExists",
						"Type2ChangeExists derive(IsRowCurrent = 0,",
						"          EndDate = currentTimestamp(),",
						"          ProductId = ProductId) ~> setInactiveRow",
						"setInactiveRow select(mapColumn(",
						"          ProductId,",
						"          IsRowCurrent,",
						"          EndDate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> setInactiveRowUpdates",
						"setInactiveRowUpdates alterRow(updateIf(true())) ~> flagUpdates",
						"newProducts@UpdateProducts derive(isRowCurrent = 1,",
						"          EffectiveDate = currentTimestamp(),",
						"          EndDate = currentTimestamp()) ~> setActiveRow",
						"setNewRecordFields sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ProductId as integer,",
						"          ProductNo as string,",
						"          ProductName as string,",
						"          Province as string,",
						"          Region as string,",
						"          Type as string,",
						"          Winery as string,",
						"          Vintage as integer,",
						"          Score as integer,",
						"          DealerPrice as integer,",
						"          Markup as double,",
						"          ListPrice as integer,",
						"          UpdatedDate as timestamp,",
						"          IsRowCurrent as integer,",
						"          EffectiveDate as timestamp,",
						"          EndDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ProductNo = newProducts@NewProducts@ProductNo,",
						"          ProductName = Title,",
						"          Province = newProducts@NewProducts@Province,",
						"          Region = Region_1,",
						"          Type = Varietal,",
						"          Winery = newProducts@NewProducts@Winery,",
						"          Vintage = newProducts@NewProducts@Vintage,",
						"          Score = newProducts@NewProducts@Score,",
						"          DealerPrice = newProducts@NewProducts@DealerPrice,",
						"          Markup = newProducts@NewProducts@Markup,",
						"          ListPrice = newProducts@NewProducts@ListPrice,",
						"          UpdatedDate,",
						"          IsRowCurrent,",
						"          EffectiveDate,",
						"          EndDate",
						"     )) ~> InsertNewProducts",
						"flagUpdates sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ProductId as integer,",
						"          ProductNo as string,",
						"          ProductName as string,",
						"          Province as string,",
						"          Region as string,",
						"          Type as string,",
						"          Winery as string,",
						"          Vintage as integer,",
						"          Score as integer,",
						"          DealerPrice as integer,",
						"          Markup as double,",
						"          ListPrice as integer,",
						"          UpdatedDate as timestamp,",
						"          IsRowCurrent as integer,",
						"          EffectiveDate as timestamp,",
						"          EndDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['ProductId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ProductId,",
						"          IsRowCurrent,",
						"          EndDate",
						"     )) ~> setInactiveProduct",
						"setActiveRow sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ProductId as integer,",
						"          ProductNo as string,",
						"          ProductName as string,",
						"          Province as string,",
						"          Region as string,",
						"          Type as string,",
						"          Winery as string,",
						"          Vintage as integer,",
						"          Score as integer,",
						"          DealerPrice as integer,",
						"          Markup as double,",
						"          ListPrice as integer,",
						"          UpdatedDate as timestamp,",
						"          IsRowCurrent as integer,",
						"          EffectiveDate as timestamp,",
						"          EndDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ProductNo = newProducts@UpdateProducts@ProductNo,",
						"          ProductName,",
						"          Province = newProducts@UpdateProducts@Province,",
						"          Region = Region_1,",
						"          Type,",
						"          Winery = newProducts@UpdateProducts@Winery,",
						"          Vintage = newProducts@UpdateProducts@Vintage,",
						"          Score = newProducts@UpdateProducts@Score,",
						"          DealerPrice = newProducts@UpdateProducts@DealerPrice,",
						"          Markup = newProducts@UpdateProducts@Markup,",
						"          ListPrice = newProducts@UpdateProducts@ListPrice,",
						"          UpdatedDate,",
						"          IsRowCurrent = setActiveRow@isRowCurrent,",
						"          EffectiveDate,",
						"          EndDate",
						"     )) ~> setActiveRows"
					]
				}
			},
			"dependsOn": []
		}
	]
}