{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "jtechfinance-adf"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/finRegionStagingPipeline')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "finRegionSourceExcel",
								"type": "DatasetReference"
							},
							"name": "finRegionSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "finRegionStageSQL",
								"type": "DatasetReference"
							},
							"name": "finRegionstaging"
						}
					],
					"transformations": [
						{
							"name": "finRegionCountryCorrecting"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Index as short,",
						"          City as string,",
						"          Country as string,",
						"          Territory as string,",
						"          {Full Name} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> finRegionSource",
						"finRegionSource derive(Country = iif(Country == 'Ausstralia', 'Australia',Country)) ~> finRegionCountryCorrecting",
						"finRegionCountryCorrecting sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          region_id as integer,",
						"          city as string,",
						"          country as string,",
						"          territory as string,",
						"          {full name} as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          region_id = Index,",
						"          city = City,",
						"          country = Country,",
						"          territory = Territory,",
						"          {full name} = {Full Name}",
						"     )) ~> finRegionstaging"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/MoveFiles')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Move files from one folder to another folder",
				"activities": [
					{
						"name": "GetFileList",
						"description": "Get the list of file",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "BinaryDataSource_Folder",
								"type": "DatasetReference",
								"parameters": {
									"Container": {
										"value": "@pipeline().parameters.SourceStore_Location",
										"type": "Expression"
									},
									"Directory": {
										"value": "@pipeline().parameters.SourceStore_Directory",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "ForEachFile",
						"description": "Iterate each file, and move them one by one.",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FilterFiles",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FilterFiles').output.value",
								"type": "Expression"
							},
							"batchCount": 20,
							"activities": [
								{
									"name": "CopyAFile",
									"description": "Copy a file from the source store to the destination store.",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											},
											"recursive": false
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											}
										},
										"enableStaging": false,
										"dataIntegrationUnits": 0
									},
									"inputs": [
										{
											"referenceName": "BinaryDataSource_File",
											"type": "DatasetReference",
											"parameters": {
												"Container": {
													"value": "@pipeline().parameters.SourceStore_Location",
													"type": "Expression"
												},
												"Directory": {
													"value": "@pipeline().parameters.SourceStore_Directory",
													"type": "Expression"
												},
												"filename": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "BinaryDataDestination",
											"type": "DatasetReference",
											"parameters": {
												"Container": {
													"value": "@pipeline().parameters.DestinationStore_Location",
													"type": "Expression"
												},
												"Directory": {
													"value": "@pipeline().parameters.DestinationStore_Directory",
													"type": "Expression"
												},
												"filename": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "DeleteAFile",
									"description": "Delete a file from the source store",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "CopyAFile",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "BinaryDataSource_File",
											"type": "DatasetReference",
											"parameters": {
												"Container": {
													"value": "@pipeline().parameters.SourceStore_Location",
													"type": "Expression"
												},
												"Directory": {
													"value": "@pipeline().parameters.SourceStore_Directory",
													"type": "Expression"
												},
												"filename": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true
										}
									}
								}
							]
						}
					},
					{
						"name": "FilterFiles",
						"description": "Only files will be selected, the source-folders will not be selected.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "GetFileList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetFileList').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(contains(item().name, 'Celeste'), not(contains(item().name,'Error')))",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"SourceStore_Location": {
						"type": "String",
						"defaultValue": "clensed"
					},
					"SourceStore_Directory": {
						"type": "String"
					},
					"DestinationStore_Location": {
						"type": "String",
						"defaultValue": "clensed"
					},
					"DestinationStore_Directory": {
						"type": "String",
						"defaultValue": "sales_data"
					}
				},
				"folder": {
					"name": "Practice"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-09T09:54:40Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_Build_dimStore')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Build dim Store",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "db_Build_dimStore",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"stageStore": {},
									"sourceDimStore": {},
									"dimStore": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Practice/09. Exercise"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-09T09:54:40Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_CopyAndUnzipFile')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy and unzip data",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "landing//sampledata.zip"
							},
							{
								"name": "Destination",
								"value": "raw//"
							}
						],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings",
									"compressionProperties": {
										"type": "ZipDeflateReadSettings",
										"preserveZipFileNameAsFolder": false
									}
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "zip_source",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "zip_destination",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Practice/01. Exercise"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-09T09:54:40Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_CopyMasterDataToCleansed')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy Master To Cleansed",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": "sampledata/MasterData",
									"wildcardFileName": "*.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": "*.csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "abs_csv_raw_masterdata",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "abs_csv_cleansed_masterdata_v2",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Practice/07. Exercise"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-09T09:54:40Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_CopyProductDataToCleansed')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy Product Data To Cleansed",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": "sampledata/ProductData",
									"wildcardFileName": "*.csv",
									"deleteFilesAfterCompletion": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "abs_binary_raw_productdata",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "abs_binary_cleansed_productdata",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Practice/07. Exercise"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-09T09:54:40Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_Copy_RawToCleansed_Sales')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy Raw to cleansed Sales",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "raw/sampledata/Arancione/"
							},
							{
								"name": "Destination",
								"value": "clensed/sales_data/"
							}
						],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"skipLineCount": 0
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"validateDataConsistency": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "abs_csv_raw_sales",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "abs_csv_raw_cleased_sales",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Practice/02. Exercise"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-09T09:54:40Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_Copy_RawtoCleansed_Sales_Verde')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetFileList",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ads_json_raw_Verde",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "JsonReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetFileList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetFileList').output.childItems",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "copyJsonToCSV_Verde",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings",
												"copyBehavior": "FlattenHierarchy"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"path": "$['YearMonth']"
													},
													"sink": {
														"name": "SalesMonth",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['StoreName']"
													},
													"sink": {
														"name": "OnlineRetailer",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['Sales']['Product']"
													},
													"sink": {
														"name": "Title",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['Sales']['Vintage']"
													},
													"sink": {
														"name": "Vintage"
													}
												},
												{
													"source": {
														"path": "$['Sales']['Variety']"
													},
													"sink": {
														"name": "Variety"
													}
												},
												{
													"source": {
														"path": "$['Sales']['Score']"
													},
													"sink": {
														"name": "Score"
													}
												},
												{
													"source": {
														"path": "$['Sales']['SalesPrice']"
													},
													"sink": {
														"name": "ListPrice",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['Sales']['SalesQty']"
													},
													"sink": {
														"name": "Quantity",
														"type": "String"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "abs_json_raw_Verde_param",
											"type": "DatasetReference",
											"parameters": {
												"filename": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "abs_csb_cleansed_Verde_param",
											"type": "DatasetReference",
											"parameters": {
												"destfilename": {
													"value": "@concat(substring(item().name,0,sub(length(item().name),5)), '.csv')",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Practice/02. Exercise"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-09T09:54:40Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_LoadStaging_MasterAndProduct')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetMetadata",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT * FROM dbo.ADF_Metadata where FolderName in ('masterdata','productdata')",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "sql_stage_dynamic",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "_notSet"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Loop over Metadata",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetMetadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetMetadata').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "LoadDataToSQL",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"wildcardFolderPath": {
													"value": "@item().FolderName",
													"type": "Expression"
												},
												"wildcardFileName": {
													"value": "@item().FileName",
													"type": "Expression"
												},
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"preCopyScript": {
												"value": "TRUNCATE TABLE stage.@{item().TableName}",
												"type": "Expression"
											},
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "abs_csv_cleansed_stage",
											"type": "DatasetReference",
											"parameters": {
												"FolderName": {
													"value": "@item().FolderName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@item().FileName",
													"type": "Expression"
												},
												"Delimiter": {
													"value": "@item().Delimiter",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "sql_stage_dynamic",
											"type": "DatasetReference",
											"parameters": {
												"TableName": {
													"value": "@item().TableName",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Practice/08. Exercise"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-09T09:54:40Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_LoadStaging_Transactions')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetMetadata",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "TruncateStageSales",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT * FROM dbo.ADF_Metadata where FolderName in ('sales_data')",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "sql_stage_dynamic",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "_notSet"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Loop over Metadata",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetMetadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetMetadata').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "LoadDataToSQL",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"wildcardFolderPath": {
													"value": "@item().FolderName",
													"type": "Expression"
												},
												"wildcardFileName": {
													"value": "@item().FileName",
													"type": "Expression"
												},
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "abs_csv_cleansed_stage",
											"type": "DatasetReference",
											"parameters": {
												"FolderName": {
													"value": "@item().FolderName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@item().FileName",
													"type": "Expression"
												},
												"Delimiter": {
													"value": "@item().Delimiter",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "sql_stage_dynamic",
											"type": "DatasetReference",
											"parameters": {
												"TableName": {
													"value": "@item().TableName",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "TruncateStageSales",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "TRUNCATE TABLE stage.Arancione_Sales\r\nTRUNCATE TABLE stage.Verde_Sales\r\nTRUNCATE TABLE stage.Celeste_Sales\r\nSELECT count(*) FROM stage.Arancione_Sales",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "sql_stage_dynamic",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "_notSet"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Practice/08. Exercise"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-09T09:54:40Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_build_dimProduct')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Build Dim Product",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_build_dimProduct",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"stageProduct": {},
									"sourceDimProduct": {},
									"InsertNewProducts": {},
									"setInactiveProduct": {},
									"setActiveRows": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Practice/09. Exercise"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-09T09:54:40Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_load_regions_staging')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "finRegionDataFlow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "finRegionStagingPipeline",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"finRegionSource": {},
									"finRegionstaging": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/finRegionStagingPipeline')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Practice/03. Exercise"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedText1",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          StoreId as integer,",
						"          StoreName as string,",
						"          OnlineStore as boolean",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          StoreId as string,",
						"          StoreName as string",
						"     ),",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Copy_RawToCleansed_Sales_Celesete')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Practice/05. Exercise"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "abs_csv_raw_celeste",
								"type": "DatasetReference"
							},
							"name": "SourceCSVCeleste"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "abs_csv_cleansed_celeste",
								"type": "DatasetReference"
							},
							"name": "sinkCSVCleansedCeleste"
						},
						{
							"dataset": {
								"referenceName": "abs_csv_cleansed_celeste_errorrows_ex5",
								"type": "DatasetReference"
							},
							"name": "sinkErrorLog"
						}
					],
					"transformations": [
						{
							"name": "RemoveZeroValues",
							"flowlet": {
								"referenceName": "fl_RemoveZeroValues",
								"type": "DataFlowReference",
								"parameters": {}
							}
						},
						{
							"name": "filtersummaryLine"
						},
						{
							"name": "AggregateDailySales"
						},
						{
							"name": "AddFileNameColumn"
						},
						{
							"name": "CheckSalesRegion"
						},
						{
							"name": "AddErrorRow"
						},
						{
							"name": "splitCleanandErrorRows"
						},
						{
							"name": "addErrorFileName"
						}
					],
					"scriptLines": [
						"source(output(",
						"          TransactionId as string,",
						"          TransactionDate as string,",
						"          OnlineRetailer as string,",
						"          SalesMonth as string,",
						"          SalesRegion as string,",
						"          SalesCurrency as string,",
						"          Title as string,",
						"          Vintage as string,",
						"          Variety as string,",
						"          Score as string,",
						"          ListPrice as string,",
						"          Quantity as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SourceCSVCeleste",
						"AggregateDailySales compose(mapColumn(",
						"          OnlineRetailer,",
						"          SalesMonth,",
						"          SalesRegion,",
						"          SalesCurrency,",
						"          Title,",
						"          Vintage,",
						"          Variety,",
						"          Score,",
						"          ListPrice,",
						"          Quantity,",
						"          FileName",
						"     ),",
						"     composition: 'fl_RemoveZeroValues') ~> RemoveZeroValues@(outputCSVCleansedCeleste)",
						"AddFileNameColumn filter(left(TransactionDate,21) != 'Total Sales Quantity:') ~> filtersummaryLine",
						"filtersummaryLine aggregate(groupBy(OnlineRetailer,",
						"          SalesMonth,",
						"          SalesRegion,",
						"          SalesCurrency,",
						"          Title,",
						"          Vintage,",
						"          Variety,",
						"          Score,",
						"          ListPrice,",
						"          FileName),",
						"     Quantity = sum(toInteger(Quantity))) ~> AggregateDailySales",
						"SourceCSVCeleste derive(FileName = concat(OnlineRetailer, '_', substring(SalesMonth, 1, 4), '_',substring(SalesMonth, 6, 2),'.csv')) ~> AddFileNameColumn",
						"RemoveZeroValues@outputCSVCleansedCeleste assert(expectTrue(or(SalesRegion == 'EU', SalesRegion == 'UK'), false, 'assertSalesRegion')) ~> CheckSalesRegion",
						"CheckSalesRegion derive(IsErrorRow = isError(),",
						"          hasErrorRow = hasError('assertSalesRegion')) ~> AddErrorRow",
						"AddErrorRow split(IsErrorRow == false(),",
						"     disjoint: false) ~> splitCleanandErrorRows@(CleanRows, ErrorRows)",
						"splitCleanandErrorRows@ErrorRows derive(ErrorFileName = concat('Error', FileName)) ~> addErrorFileName",
						"splitCleanandErrorRows@CleanRows sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          OnlineRetailer as string,",
						"          SalesMonth as string,",
						"          Title as string,",
						"          Vintage as string,",
						"          Variety as string,",
						"          Score as string,",
						"          ListPrice as string,",
						"          Quantity as string",
						"     ),",
						"     rowUrlColumn:'FileName',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          OnlineRetailer,",
						"          SalesMonth,",
						"          Title,",
						"          Vintage,",
						"          Variety,",
						"          Score,",
						"          ListPrice,",
						"          Quantity",
						"     )) ~> sinkCSVCleansedCeleste",
						"addErrorFileName sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          OnlineRetailer as string,",
						"          SalesMonth as string,",
						"          Title as string,",
						"          Vintage as string,",
						"          Variety as string,",
						"          Score as string,",
						"          ListPrice as string,",
						"          Quantity as string",
						"     ),",
						"     rowUrlColumn:'ErrorFileName',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkErrorLog"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Copy_RawToCleansed_Sales_Celesete_ex3')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Practice/03. Exercise"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "abs_csv_raw_celeste_ex3",
								"type": "DatasetReference"
							},
							"name": "SourceCSVCeleste"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "abs_csv_cleansed_celeste_ex3",
								"type": "DatasetReference"
							},
							"name": "sinkCSVCleansedCeleste"
						}
					],
					"transformations": [
						{
							"name": "filtersummaryLine"
						},
						{
							"name": "AggregateDailySales"
						},
						{
							"name": "AddFileNameColumn"
						}
					],
					"scriptLines": [
						"source(output(",
						"          TransactionId as string,",
						"          TransactionDate as string,",
						"          OnlineRetailer as string,",
						"          SalesMonth as string,",
						"          SalesRegion as string,",
						"          SalesCurrency as string,",
						"          Title as string,",
						"          Vintage as string,",
						"          Variety as string,",
						"          Score as string,",
						"          ListPrice as string,",
						"          Quantity as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SourceCSVCeleste",
						"AddFileNameColumn filter(left(TransactionDate,21) != 'Total Sales Quantity:') ~> filtersummaryLine",
						"filtersummaryLine aggregate(groupBy(OnlineRetailer,",
						"          SalesMonth,",
						"          SalesRegion,",
						"          SalesCurrency,",
						"          Title,",
						"          Vintage,",
						"          Score,",
						"          ListPrice,",
						"          FileName),",
						"     Quantity = sum(toInteger(Quantity))) ~> AggregateDailySales",
						"SourceCSVCeleste derive(FileName = concat(OnlineRetailer, '_', substring(SalesMonth, 1, 4), '_',substring(SalesMonth, 6, 2))) ~> AddFileNameColumn",
						"AggregateDailySales sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          OnlineRetailer as string,",
						"          SalesMonth as string,",
						"          Title as string,",
						"          Vintage as string,",
						"          Variety as string,",
						"          Score as string,",
						"          ListPrice as string,",
						"          Quantity as string",
						"     ),",
						"     rowUrlColumn:'FileName',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkCSVCleansedCeleste"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Copy_RawToCleansed_Sales_Celesete_ex4')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Practice/04. Exercise"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "abs_csv_raw_celeste_ex3",
								"type": "DatasetReference"
							},
							"name": "SourceCSVCeleste"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "abs_csv_cleansed_celeste_ex3",
								"type": "DatasetReference"
							},
							"name": "sinkCSVCleansedCeleste"
						}
					],
					"transformations": [
						{
							"name": "RemoveZeroValues",
							"flowlet": {
								"referenceName": "fl_RemoveZeroValues",
								"type": "DataFlowReference",
								"parameters": {}
							}
						},
						{
							"name": "filtersummaryLine"
						},
						{
							"name": "AggregateDailySales"
						},
						{
							"name": "AddFileNameColumn"
						}
					],
					"scriptLines": [
						"source(output(",
						"          TransactionId as string,",
						"          TransactionDate as string,",
						"          OnlineRetailer as string,",
						"          SalesMonth as string,",
						"          SalesRegion as string,",
						"          SalesCurrency as string,",
						"          Title as string,",
						"          Vintage as string,",
						"          Variety as string,",
						"          Score as string,",
						"          ListPrice as string,",
						"          Quantity as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SourceCSVCeleste",
						"AggregateDailySales compose(mapColumn(",
						"          OnlineRetailer,",
						"          SalesMonth,",
						"          SalesRegion,",
						"          SalesCurrency,",
						"          Title,",
						"          Vintage,",
						"          Variety,",
						"          Score,",
						"          ListPrice,",
						"          Quantity,",
						"          FileName",
						"     ),",
						"     composition: 'fl_RemoveZeroValues') ~> RemoveZeroValues@(outputCSVCleansedCeleste)",
						"AddFileNameColumn filter(left(TransactionDate,21) != 'Total Sales Quantity:') ~> filtersummaryLine",
						"filtersummaryLine aggregate(groupBy(OnlineRetailer,",
						"          SalesMonth,",
						"          SalesRegion,",
						"          SalesCurrency,",
						"          Title,",
						"          Vintage,",
						"          Variety,",
						"          Score,",
						"          ListPrice,",
						"          FileName),",
						"     Quantity = sum(toInteger(Quantity))) ~> AggregateDailySales",
						"SourceCSVCeleste derive(FileName = concat(OnlineRetailer, '_', substring(SalesMonth, 1, 4), '_',substring(SalesMonth, 6, 2))) ~> AddFileNameColumn",
						"RemoveZeroValues@outputCSVCleansedCeleste sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          OnlineRetailer as string,",
						"          SalesMonth as string,",
						"          Title as string,",
						"          Vintage as string,",
						"          Variety as string,",
						"          Score as string,",
						"          ListPrice as string,",
						"          Quantity as string",
						"     ),",
						"     rowUrlColumn:'FileName',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkCSVCleansedCeleste"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Copy_RawToCleansed_Sales_Celesete_ex5')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Practice/05. Exercise"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "abs_csv_raw_celeste_ex3",
								"type": "DatasetReference"
							},
							"name": "SourceCSVCeleste"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "abs_csv_cleansed_celeste_ex3",
								"type": "DatasetReference"
							},
							"name": "sinkCSVCleansedCeleste"
						},
						{
							"dataset": {
								"referenceName": "abs_csv_cleansed_celeste_errorrows_ex5",
								"type": "DatasetReference"
							},
							"name": "sinkErrorLog"
						}
					],
					"transformations": [
						{
							"name": "RemoveZeroValues",
							"flowlet": {
								"referenceName": "fl_RemoveZeroValues",
								"type": "DataFlowReference",
								"parameters": {}
							}
						},
						{
							"name": "filtersummaryLine"
						},
						{
							"name": "AggregateDailySales"
						},
						{
							"name": "AddFileNameColumn"
						},
						{
							"name": "CheckSalesRegion"
						},
						{
							"name": "AddErrorRow"
						},
						{
							"name": "splitCleanandErrorRows"
						},
						{
							"name": "addErrorFileName"
						}
					],
					"scriptLines": [
						"source(output(",
						"          TransactionId as string,",
						"          TransactionDate as string,",
						"          OnlineRetailer as string,",
						"          SalesMonth as string,",
						"          SalesRegion as string,",
						"          SalesCurrency as string,",
						"          Title as string,",
						"          Vintage as string,",
						"          Variety as string,",
						"          Score as string,",
						"          ListPrice as string,",
						"          Quantity as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SourceCSVCeleste",
						"AggregateDailySales compose(mapColumn(",
						"          OnlineRetailer,",
						"          SalesMonth,",
						"          SalesRegion,",
						"          SalesCurrency,",
						"          Title,",
						"          Vintage,",
						"          Variety,",
						"          Score,",
						"          ListPrice,",
						"          Quantity,",
						"          FileName",
						"     ),",
						"     composition: 'fl_RemoveZeroValues') ~> RemoveZeroValues@(outputCSVCleansedCeleste)",
						"AddFileNameColumn filter(left(TransactionDate,21) != 'Total Sales Quantity:') ~> filtersummaryLine",
						"filtersummaryLine aggregate(groupBy(OnlineRetailer,",
						"          SalesMonth,",
						"          SalesRegion,",
						"          SalesCurrency,",
						"          Title,",
						"          Vintage,",
						"          Variety,",
						"          Score,",
						"          ListPrice,",
						"          FileName),",
						"     Quantity = sum(toInteger(Quantity))) ~> AggregateDailySales",
						"SourceCSVCeleste derive(FileName = concat(OnlineRetailer, '_', substring(SalesMonth, 1, 4), '_',substring(SalesMonth, 6, 2))) ~> AddFileNameColumn",
						"RemoveZeroValues@outputCSVCleansedCeleste assert(expectTrue(or(SalesRegion == 'EU', SalesRegion == 'UK'), false, 'assertSalesRegion')) ~> CheckSalesRegion",
						"CheckSalesRegion derive(IsErrorRow = isError(),",
						"          hasErrorRow = hasError('assertSalesRegion')) ~> AddErrorRow",
						"AddErrorRow split(IsErrorRow == false(),",
						"     disjoint: false) ~> splitCleanandErrorRows@(CleanRows, ErrorRows)",
						"splitCleanandErrorRows@ErrorRows derive(ErrorFileName = concat('Error', FileName)) ~> addErrorFileName",
						"splitCleanandErrorRows@CleanRows sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          OnlineRetailer as string,",
						"          SalesMonth as string,",
						"          Title as string,",
						"          Vintage as string,",
						"          Variety as string,",
						"          Score as string,",
						"          ListPrice as string,",
						"          Quantity as string",
						"     ),",
						"     rowUrlColumn:'FileName',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          OnlineRetailer,",
						"          SalesMonth,",
						"          Title,",
						"          Vintage,",
						"          Variety,",
						"          Score,",
						"          ListPrice,",
						"          Quantity",
						"     )) ~> sinkCSVCleansedCeleste",
						"addErrorFileName sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          OnlineRetailer as string,",
						"          SalesMonth as string,",
						"          Title as string,",
						"          Vintage as string,",
						"          Variety as string,",
						"          Score as string,",
						"          ListPrice as string,",
						"          Quantity as string",
						"     ),",
						"     rowUrlColumn:'ErrorFileName',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkErrorLog"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Copy_RawToCleansed_Sales_Celesete_ex6')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Practice"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "abs_csv_raw_celeste_ex3",
								"type": "DatasetReference"
							},
							"name": "SourceCSVCeleste"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "abs_csv_cleansed_celeste_ex3",
								"type": "DatasetReference"
							},
							"name": "sinkCSVCleansedCeleste"
						},
						{
							"dataset": {
								"referenceName": "abs_csv_cleansed_celeste_errorrows_ex5",
								"type": "DatasetReference"
							},
							"name": "sinkErrorLog"
						}
					],
					"transformations": [
						{
							"name": "RemoveZeroValues",
							"flowlet": {
								"referenceName": "fl_RemoveZeroValues",
								"type": "DataFlowReference",
								"parameters": {}
							}
						},
						{
							"name": "filtersummaryLine"
						},
						{
							"name": "AggregateDailySales"
						},
						{
							"name": "AddFileNameColumn"
						},
						{
							"name": "CheckSalesRegion"
						},
						{
							"name": "AddErrorRow"
						},
						{
							"name": "splitCleanandErrorRows"
						},
						{
							"name": "addErrorFileName"
						}
					],
					"scriptLines": [
						"source(output(",
						"          TransactionId as string,",
						"          TransactionDate as string,",
						"          OnlineRetailer as string,",
						"          SalesMonth as string,",
						"          SalesRegion as string,",
						"          SalesCurrency as string,",
						"          Title as string,",
						"          Vintage as string,",
						"          Variety as string,",
						"          Score as string,",
						"          ListPrice as string,",
						"          Quantity as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SourceCSVCeleste",
						"AggregateDailySales compose(mapColumn(",
						"          OnlineRetailer,",
						"          SalesMonth,",
						"          SalesRegion,",
						"          SalesCurrency,",
						"          Title,",
						"          Vintage,",
						"          Variety,",
						"          Score,",
						"          ListPrice,",
						"          Quantity,",
						"          FileName",
						"     ),",
						"     composition: 'fl_RemoveZeroValues') ~> RemoveZeroValues@(outputCSVCleansedCeleste)",
						"AddFileNameColumn filter(left(TransactionDate,21) != 'Total Sales Quantity:') ~> filtersummaryLine",
						"filtersummaryLine aggregate(groupBy(OnlineRetailer,",
						"          SalesMonth,",
						"          SalesRegion,",
						"          SalesCurrency,",
						"          Title,",
						"          Vintage,",
						"          Variety,",
						"          Score,",
						"          ListPrice,",
						"          FileName),",
						"     Quantity = sum(toInteger(Quantity))) ~> AggregateDailySales",
						"SourceCSVCeleste derive(FileName = concat(OnlineRetailer, '_', substring(SalesMonth, 1, 4), '_',substring(SalesMonth, 6, 2))) ~> AddFileNameColumn",
						"RemoveZeroValues@outputCSVCleansedCeleste assert(expectTrue(or(SalesRegion == 'EU', SalesRegion == 'UK'), false, 'assertSalesRegion')) ~> CheckSalesRegion",
						"CheckSalesRegion derive(IsErrorRow = isError(),",
						"          hasErrorRow = hasError('assertSalesRegion')) ~> AddErrorRow",
						"AddErrorRow split(IsErrorRow == false(),",
						"     disjoint: false) ~> splitCleanandErrorRows@(CleanRows, ErrorRows)",
						"splitCleanandErrorRows@ErrorRows derive(ErrorFileName = concat('Error', FileName)) ~> addErrorFileName",
						"splitCleanandErrorRows@CleanRows sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          OnlineRetailer as string,",
						"          SalesMonth as string,",
						"          Title as string,",
						"          Vintage as string,",
						"          Variety as string,",
						"          Score as string,",
						"          ListPrice as string,",
						"          Quantity as string",
						"     ),",
						"     rowUrlColumn:'FileName',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          OnlineRetailer,",
						"          SalesMonth,",
						"          Title,",
						"          Vintage,",
						"          Variety,",
						"          Score,",
						"          ListPrice,",
						"          Quantity",
						"     )) ~> sinkCSVCleansedCeleste",
						"addErrorFileName sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          OnlineRetailer as string,",
						"          SalesMonth as string,",
						"          Title as string,",
						"          Vintage as string,",
						"          Variety as string,",
						"          Score as string,",
						"          ListPrice as string,",
						"          Quantity as string",
						"     ),",
						"     rowUrlColumn:'ErrorFileName',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkErrorLog"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_Copy_RawToCleansed_Sales_Celeste')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data Flow Copy Raw to Cleansed Celetse",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Copy_RawToCleansed_Sales_Celesete",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceCSVCeleste": {},
									"sinkCSVCleansedCeleste": {},
									"sinkErrorLog": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Practice/05. Exercise"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-09T09:54:41Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_Copy_RawToCleansed_Sales_Celesete')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_Copy_RawToCleansed_Sales_Celeste_ex3')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data Flow Copy Raw to Cleansed Celetse",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Copy_RawToCleansed_Sales_Celesete_ex3",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceCSVCeleste": {},
									"sinkCSVCleansedCeleste": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Practice/03. Exercise"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-09T09:54:41Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_Copy_RawToCleansed_Sales_Celesete_ex3')]"
			]
		}
	]
}