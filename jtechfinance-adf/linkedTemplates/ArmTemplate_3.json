{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "jtechfinance-adf"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/abs_csv_raw_cleased_sales')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_jtechfinance_dev",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Practice/02. Exercise"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "sales_data",
						"fileSystem": "clensed"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/abs_csv_raw_masterdata')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_jtechfinance_dev",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Practice"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "sampledata/MasterData",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "CurrencyCode",
						"type": "String"
					},
					{
						"name": "CurrencyName",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/abs_csv_raw_sales')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_jtechfinance_dev",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Practice/02. Exercise"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "sampledata/Arancione",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "OnlineRetailer",
						"type": "String"
					},
					{
						"name": "SalesMonth",
						"type": "String"
					},
					{
						"name": "Title",
						"type": "String"
					},
					{
						"name": "Vintage",
						"type": "String"
					},
					{
						"name": "Variety",
						"type": "String"
					},
					{
						"name": "Score",
						"type": "String"
					},
					{
						"name": "ListPrice",
						"type": "String"
					},
					{
						"name": "Quantity",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/abs_json_raw_Verde_param')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_jtechfinance_dev",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Practice"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": "sampledata/Verde",
						"fileSystem": "raw"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"YearMonth": {
							"type": "string"
						},
						"StoreName": {
							"type": "string"
						},
						"Sales": {
							"type": "object",
							"properties": {
								"Product": {
									"type": "string"
								},
								"Vintage": {
									"type": "string"
								},
								"Variety": {
									"type": "string"
								},
								"Score": {
									"type": "string"
								},
								"SalesPrice": {
									"type": "string"
								},
								"SalesQty": {
									"type": "string"
								}
							}
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ads_json_raw_Verde')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_jtechfinance_dev",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Practice"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "sampledata/Verde",
						"fileSystem": "raw"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"YearMonth": {
							"type": "string"
						},
						"StoreName": {
							"type": "string"
						},
						"Sales": {
							"type": "object",
							"properties": {
								"Product": {
									"type": "string"
								},
								"Vintage": {
									"type": "string"
								},
								"Variety": {
									"type": "string"
								},
								"Score": {
									"type": "string"
								},
								"SalesPrice": {
									"type": "string"
								},
								"SalesQty": {
									"type": "string"
								}
							}
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/zip_destination')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_jtechfinance_dev",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Practice/01. Exercise"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "raw"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/zip_source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_jtechfinance_dev",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Practice/01. Exercise"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "sampledata.zip",
						"fileSystem": "landing"
					},
					"compression": {
						"type": "ZipDeflate"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/db_Build_dimStore')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Practice"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "sql_stage_store",
								"type": "DatasetReference"
							},
							"name": "stageStore"
						},
						{
							"dataset": {
								"referenceName": "sql_dim_store",
								"type": "DatasetReference"
							},
							"name": "sourceDimStore"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sql_dim_store",
								"type": "DatasetReference"
							},
							"name": "dimStore"
						}
					],
					"transformations": [
						{
							"name": "checkStoreExists"
						},
						{
							"name": "setInsertUpdateDates"
						},
						{
							"name": "UpdateOrInsert"
						}
					],
					"scriptLines": [
						"source(output(",
						"          StoreName as string,",
						"          StoreType as string,",
						"          Description as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> stageStore",
						"source(output(",
						"          StoreId as integer,",
						"          StoreName as string,",
						"          StoreType as string,",
						"          Description as string,",
						"          InsertedDate as timestamp,",
						"          UpdatedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> sourceDimStore",
						"stageStore, sourceDimStore lookup(stageStore@StoreName == sourceDimStore@StoreName,",
						"     multiple: true,",
						"     broadcast: 'auto')~> checkStoreExists",
						"checkStoreExists derive(InsertedDate = iif(isNull(InsertedDate),currentTimestamp(),InsertedDate),",
						"          UpdatedDate = currentTimestamp()) ~> setInsertUpdateDates",
						"setInsertUpdateDates alterRow(upsertIf(true())) ~> UpdateOrInsert",
						"UpdateOrInsert sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          StoreId as integer,",
						"          StoreName as string,",
						"          StoreType as string,",
						"          Description as string,",
						"          InsertedDate as timestamp,",
						"          UpdatedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['StoreName'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          StoreName = stageStore@StoreName,",
						"          StoreType = stageStore@StoreType,",
						"          Description = stageStore@Description,",
						"          InsertedDate,",
						"          UpdatedDate",
						"     )) ~> dimStore"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_build_dimProduct')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Practice"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "sql_stage_product_table",
								"type": "DatasetReference"
							},
							"name": "stageProduct"
						},
						{
							"dataset": {
								"referenceName": "ProductDimension",
								"type": "DatasetReference"
							},
							"name": "sourceDimProduct"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "dimProduct",
								"type": "DatasetReference"
							},
							"name": "InsertNewProducts"
						},
						{
							"dataset": {
								"referenceName": "dimProduct",
								"type": "DatasetReference"
							},
							"name": "setInactiveProduct"
						},
						{
							"dataset": {
								"referenceName": "ProductDimension",
								"type": "DatasetReference"
							},
							"name": "setActiveRows"
						}
					],
					"transformations": [
						{
							"name": "activeDimProduct"
						},
						{
							"name": "newAndOldProduct"
						},
						{
							"name": "newProducts"
						},
						{
							"name": "setNewRecordFields"
						},
						{
							"name": "Type2ChangeExists"
						},
						{
							"name": "setInactiveRow"
						},
						{
							"name": "setInactiveRowUpdates"
						},
						{
							"name": "flagUpdates"
						},
						{
							"name": "setActiveRow"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ProductNo as string,",
						"          Country as string,",
						"          Score as string,",
						"          DealerPrice as integer,",
						"          Markup as double,",
						"          ListPrice as integer,",
						"          Province as string,",
						"          Region_1 as string,",
						"          Title as string,",
						"          Vintage as integer,",
						"          Varietal as string,",
						"          Winery as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> stageProduct",
						"source(output(",
						"          ProductId as integer,",
						"          ProductNo as string,",
						"          ProductName as string,",
						"          Province as string,",
						"          Region as string,",
						"          Type as string,",
						"          Winery as string,",
						"          Vintage as integer,",
						"          Score as integer,",
						"          DealerPrice as integer,",
						"          Markup as double,",
						"          ListPrice as integer,",
						"          UpdatedDate as timestamp,",
						"          IsRowCurrent as integer,",
						"          EffectiveDate as timestamp,",
						"          EndDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> sourceDimProduct",
						"sourceDimProduct filter(IsRowCurrent == 1) ~> activeDimProduct",
						"stageProduct, activeDimProduct join(stageProduct@ProductNo == sourceDimProduct@ProductNo,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> newAndOldProduct",
						"newAndOldProduct split(isNull(sourceDimProduct@ProductNo),",
						"     stageProduct@ProductNo == sourceDimProduct@ProductNo && toInteger(stageProduct@Score) == sourceDimProduct@Score,",
						"     disjoint: false) ~> newProducts@(NewProducts, NoUpdateProducts, UpdateProducts)",
						"newProducts@NewProducts derive(UpdatedDate = currentTimestamp(),",
						"          IsRowCurrent = 1,",
						"          EffectiveDate = currentTimestamp(),",
						"          EndDate = toDate('2099-12-31')) ~> setNewRecordFields",
						"newProducts@UpdateProducts, activeDimProduct exists(equals(newProducts@UpdateProducts@ProductNo, sourceDimProduct@ProductNo) &&\r",
						"(toInteger(newProducts@UpdateProducts@Score) != sourceDimProduct@Score),",
						"     negate:false,",
						"     broadcast: 'auto')~> Type2ChangeExists",
						"Type2ChangeExists derive(IsRowCurrent = 0,",
						"          EndDate = currentTimestamp(),",
						"          ProductId = ProductId) ~> setInactiveRow",
						"setInactiveRow select(mapColumn(",
						"          ProductId,",
						"          IsRowCurrent,",
						"          EndDate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> setInactiveRowUpdates",
						"setInactiveRowUpdates alterRow(updateIf(true())) ~> flagUpdates",
						"newProducts@UpdateProducts derive(isRowCurrent = 1,",
						"          EffectiveDate = currentTimestamp(),",
						"          EndDate = currentTimestamp()) ~> setActiveRow",
						"setNewRecordFields sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ProductId as integer,",
						"          ProductNo as string,",
						"          ProductName as string,",
						"          Province as string,",
						"          Region as string,",
						"          Type as string,",
						"          Winery as string,",
						"          Vintage as integer,",
						"          Score as integer,",
						"          DealerPrice as integer,",
						"          Markup as double,",
						"          ListPrice as integer,",
						"          UpdatedDate as timestamp,",
						"          IsRowCurrent as integer,",
						"          EffectiveDate as timestamp,",
						"          EndDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ProductNo = newProducts@NewProducts@ProductNo,",
						"          ProductName = Title,",
						"          Province = newProducts@NewProducts@Province,",
						"          Region = Region_1,",
						"          Type = Varietal,",
						"          Winery = newProducts@NewProducts@Winery,",
						"          Vintage = newProducts@NewProducts@Vintage,",
						"          Score = newProducts@NewProducts@Score,",
						"          DealerPrice = newProducts@NewProducts@DealerPrice,",
						"          Markup = newProducts@NewProducts@Markup,",
						"          ListPrice = newProducts@NewProducts@ListPrice,",
						"          UpdatedDate,",
						"          IsRowCurrent,",
						"          EffectiveDate,",
						"          EndDate",
						"     )) ~> InsertNewProducts",
						"flagUpdates sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ProductId as integer,",
						"          ProductNo as string,",
						"          ProductName as string,",
						"          Province as string,",
						"          Region as string,",
						"          Type as string,",
						"          Winery as string,",
						"          Vintage as integer,",
						"          Score as integer,",
						"          DealerPrice as integer,",
						"          Markup as double,",
						"          ListPrice as integer,",
						"          UpdatedDate as timestamp,",
						"          IsRowCurrent as integer,",
						"          EffectiveDate as timestamp,",
						"          EndDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['ProductId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ProductId,",
						"          IsRowCurrent,",
						"          EndDate",
						"     )) ~> setInactiveProduct",
						"setActiveRow sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ProductId as integer,",
						"          ProductNo as string,",
						"          ProductName as string,",
						"          Province as string,",
						"          Region as string,",
						"          Type as string,",
						"          Winery as string,",
						"          Vintage as integer,",
						"          Score as integer,",
						"          DealerPrice as integer,",
						"          Markup as double,",
						"          ListPrice as integer,",
						"          UpdatedDate as timestamp,",
						"          IsRowCurrent as integer,",
						"          EffectiveDate as timestamp,",
						"          EndDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ProductNo = newProducts@UpdateProducts@ProductNo,",
						"          ProductName,",
						"          Province = newProducts@UpdateProducts@Province,",
						"          Region = Region_1,",
						"          Type,",
						"          Winery = newProducts@UpdateProducts@Winery,",
						"          Vintage = newProducts@UpdateProducts@Vintage,",
						"          Score = newProducts@UpdateProducts@Score,",
						"          DealerPrice = newProducts@UpdateProducts@DealerPrice,",
						"          Markup = newProducts@UpdateProducts@Markup,",
						"          ListPrice = newProducts@UpdateProducts@ListPrice,",
						"          UpdatedDate,",
						"          IsRowCurrent = setActiveRow@isRowCurrent,",
						"          EffectiveDate,",
						"          EndDate",
						"     )) ~> setActiveRows"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_build_region')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "fin_region"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "sql_stage_region",
								"type": "DatasetReference"
							},
							"name": "finStageRegion"
						},
						{
							"dataset": {
								"referenceName": "SQLDimRegion",
								"type": "DatasetReference"
							},
							"name": "finDimRegion"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SQLDimRegion",
								"type": "DatasetReference"
							},
							"name": "dimRegion"
						}
					],
					"transformations": [
						{
							"name": "checkRegionExists"
						},
						{
							"name": "setInsertUpdateDates"
						},
						{
							"name": "updateOrInsert"
						}
					],
					"scriptLines": [
						"source(output(",
						"          region_id as integer,",
						"          city as string,",
						"          country as string,",
						"          territory as string,",
						"          {full name} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> finStageRegion",
						"source(output(",
						"          region_surr_id as integer,",
						"          region_id as integer,",
						"          city as string,",
						"          country as string,",
						"          territory as string,",
						"          {full name} as string,",
						"          InsertedDate as timestamp,",
						"          UpdatedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> finDimRegion",
						"finStageRegion, finDimRegion lookup(finStageRegion@region_id == finDimRegion@region_id,",
						"     multiple: true,",
						"     broadcast: 'auto')~> checkRegionExists",
						"checkRegionExists derive(InsertedDate = iif(isNull(InsertedDate), currentTimestamp(), InsertedDate),",
						"          UpdatedDate = currentTimestamp()) ~> setInsertUpdateDates",
						"setInsertUpdateDates alterRow(upsertIf(true())) ~> updateOrInsert",
						"updateOrInsert sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          region_surr_id as integer,",
						"          region_id as integer,",
						"          city as string,",
						"          country as string,",
						"          territory as string,",
						"          {full name} as string,",
						"          InsertedDate as timestamp,",
						"          UpdatedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['region_id'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          region_id = finStageRegion@region_id,",
						"          city = finStageRegion@city,",
						"          country = finStageRegion@country,",
						"          territory = finStageRegion@territory,",
						"          {full name} = finStageRegion@{full name},",
						"          InsertedDate,",
						"          UpdatedDate",
						"     )) ~> dimRegion"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_finproductsDim')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "fin_products"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "staging_fin_products_final",
								"type": "DatasetReference"
							},
							"name": "sourceProducts"
						},
						{
							"dataset": {
								"referenceName": "fin_dim_products",
								"type": "DatasetReference"
							},
							"name": "dimProducts"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "fin_dim_products",
								"type": "DatasetReference"
							},
							"name": "sinkDimProducts"
						},
						{
							"dataset": {
								"referenceName": "fin_dim_products",
								"type": "DatasetReference"
							},
							"name": "sinkActiveRecords"
						},
						{
							"dataset": {
								"referenceName": "fin_dim_products",
								"type": "DatasetReference"
							},
							"name": "sinkDimFinProducts"
						}
					],
					"transformations": [
						{
							"name": "checkProducts"
						},
						{
							"name": "NewandOldProducts"
						},
						{
							"name": "filterActive"
						},
						{
							"name": "newProductscolumns"
						},
						{
							"name": "Type2ChangeExists"
						},
						{
							"name": "setinactive"
						},
						{
							"name": "flagUpdates"
						},
						{
							"name": "setActiveRow"
						},
						{
							"name": "typ2changeinsert"
						}
					],
					"scriptLines": [
						"source(output(",
						"          product_no as integer,",
						"          product_name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> sourceProducts",
						"source(output(",
						"          product_id as integer,",
						"          product_no as integer,",
						"          product_name as string,",
						"          UpdatedDate as timestamp,",
						"          IsRowCurrent as boolean,",
						"          EffectiveDate as timestamp,",
						"          EndDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> dimProducts",
						"sourceProducts, filterActive join(sourceProducts@product_no == dimProducts@product_no,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> checkProducts",
						"checkProducts split(isNull(dimProducts@product_no),",
						"     disjoint: false) ~> NewandOldProducts@(NewProducts, Existing)",
						"dimProducts filter(IsRowCurrent == true()) ~> filterActive",
						"NewandOldProducts@NewProducts derive(UpdatedDate = currentTimestamp(),",
						"          IsRowCurrent = 1,",
						"          EffectiveDate = currentTimestamp(),",
						"          EndDate = toDate('2025-12-31')) ~> newProductscolumns",
						"NewandOldProducts@Existing, filterActive exists(equals(NewandOldProducts@Existing@product_no,dimProducts@product_no) &&",
						"(NewandOldProducts@Existing@product_name != dimProducts@product_name),",
						"     negate:false,",
						"     broadcast: 'auto')~> Type2ChangeExists",
						"Type2ChangeExists derive(IsRowCurrent = false(),",
						"          EndDate = currentTimestamp()) ~> setinactive",
						"setinactive alterRow(updateIf(true())) ~> flagUpdates",
						"typ2changeinsert derive(IsRowCurrent = 1,",
						"          EffectiveDate = currentTimestamp()) ~> setActiveRow",
						"NewandOldProducts@Existing, filterActive exists(equals(NewandOldProducts@Existing@product_no,dimProducts@product_no) &&",
						"(NewandOldProducts@Existing@product_name != dimProducts@product_name),",
						"     negate:false,",
						"     broadcast: 'left')~> typ2changeinsert",
						"newProductscolumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          product_id as integer,",
						"          product_no as integer,",
						"          product_name as string,",
						"          UpdatedDate as timestamp,",
						"          IsRowCurrent as boolean,",
						"          EffectiveDate as timestamp,",
						"          EndDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          product_no = product_id,",
						"          product_name = NewandOldProducts@NewProducts@product_name,",
						"          UpdatedDate,",
						"          IsRowCurrent,",
						"          EffectiveDate,",
						"          EndDate",
						"     )) ~> sinkDimProducts",
						"setActiveRow sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          product_id as integer,",
						"          product_no as integer,",
						"          product_name as string,",
						"          UpdatedDate as timestamp,",
						"          IsRowCurrent as boolean,",
						"          EffectiveDate as timestamp,",
						"          EndDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          product_no,",
						"          product_name = NewandOldProducts@Existing@product_name,",
						"          UpdatedDate,",
						"          IsRowCurrent,",
						"          EffectiveDate,",
						"          EndDate",
						"     )) ~> sinkActiveRecords",
						"flagUpdates sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          product_id as integer,",
						"          product_no as integer,",
						"          product_name as string,",
						"          UpdatedDate as timestamp,",
						"          IsRowCurrent as boolean,",
						"          EffectiveDate as timestamp,",
						"          EndDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['product_id'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          product_id,",
						"          IsRowCurrent,",
						"          EffectiveDate,",
						"          EndDate",
						"     )) ~> sinkDimFinProducts"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_products_staging_sink')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "fin_products"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "productSource",
								"type": "DatasetReference"
							},
							"name": "dimProductSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "staging_fin_products_final",
								"type": "DatasetReference"
							},
							"name": "stageProductSink"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          Index as string,",
						"          {Product Name} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> dimProductSource",
						"dimProductSource sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          product_no as integer,",
						"          product_name as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          product_no = Index,",
						"          product_name = {Product Name}",
						"     )) ~> stageProductSink"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/finRegionStagingPipeline')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "fin_region"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "finRegionSourceExcel",
								"type": "DatasetReference"
							},
							"name": "finRegionSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "finRegionStageSQL",
								"type": "DatasetReference"
							},
							"name": "finRegionstaging"
						}
					],
					"transformations": [
						{
							"name": "finRegionCountryCorrecting"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Index as short,",
						"          City as string,",
						"          Country as string,",
						"          Territory as string,",
						"          {Full Name} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> finRegionSource",
						"finRegionSource derive(Country = iif(Country == 'Ausstralia', 'Australia',Country)) ~> finRegionCountryCorrecting",
						"finRegionCountryCorrecting sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          region_id as integer,",
						"          city as string,",
						"          country as string,",
						"          territory as string,",
						"          {full name} as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          region_id = Index,",
						"          city = City,",
						"          country = Country,",
						"          territory = Territory,",
						"          {full name} = {Full Name}",
						"     )) ~> finRegionstaging"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SalesCopy')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopySalesDatatStaging",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "OrderNumber",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ordernumber",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "OrderDate",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "orderdate",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "Customer Name Index",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "customer name index",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Channel",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "channel",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Currency Code",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "currency_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Warehouse Code",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "warehouse_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Delivery Region Index",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "region_id",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Product Description Index",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "product_id",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Order Quantity",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "order_quantity",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Unit Price",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "unit_price",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 2,
											"precision": 10
										}
									},
									{
										"source": {
											"name": "Line Total",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "line_total",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 2,
											"precision": 10
										}
									},
									{
										"source": {
											"name": "Total Unit Cost",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "total_unit_cost",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 2,
											"precision": 10
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "salesdata",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "salesdatasql",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "sales"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/MoveFiles')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Move files from one folder to another folder",
				"activities": [
					{
						"name": "GetFileList",
						"description": "Get the list of file",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "BinaryDataSource_Folder",
								"type": "DatasetReference",
								"parameters": {
									"Container": {
										"value": "@pipeline().parameters.SourceStore_Location",
										"type": "Expression"
									},
									"Directory": {
										"value": "@pipeline().parameters.SourceStore_Directory",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "ForEachFile",
						"description": "Iterate each file, and move them one by one.",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FilterFiles",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FilterFiles').output.value",
								"type": "Expression"
							},
							"batchCount": 20,
							"activities": [
								{
									"name": "CopyAFile",
									"description": "Copy a file from the source store to the destination store.",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											},
											"recursive": false
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											}
										},
										"enableStaging": false,
										"dataIntegrationUnits": 0
									},
									"inputs": [
										{
											"referenceName": "BinaryDataSource_File",
											"type": "DatasetReference",
											"parameters": {
												"Container": {
													"value": "@pipeline().parameters.SourceStore_Location",
													"type": "Expression"
												},
												"Directory": {
													"value": "@pipeline().parameters.SourceStore_Directory",
													"type": "Expression"
												},
												"filename": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "BinaryDataDestination",
											"type": "DatasetReference",
											"parameters": {
												"Container": {
													"value": "@pipeline().parameters.DestinationStore_Location",
													"type": "Expression"
												},
												"Directory": {
													"value": "@pipeline().parameters.DestinationStore_Directory",
													"type": "Expression"
												},
												"filename": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "DeleteAFile",
									"description": "Delete a file from the source store",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "CopyAFile",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "BinaryDataSource_File",
											"type": "DatasetReference",
											"parameters": {
												"Container": {
													"value": "@pipeline().parameters.SourceStore_Location",
													"type": "Expression"
												},
												"Directory": {
													"value": "@pipeline().parameters.SourceStore_Directory",
													"type": "Expression"
												},
												"filename": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true
										}
									}
								}
							]
						}
					},
					{
						"name": "FilterFiles",
						"description": "Only files will be selected, the source-folders will not be selected.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "GetFileList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetFileList').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(contains(item().name, 'Celeste'), not(contains(item().name,'Error')))",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"SourceStore_Location": {
						"type": "String",
						"defaultValue": "clensed"
					},
					"SourceStore_Directory": {
						"type": "String"
					},
					"DestinationStore_Location": {
						"type": "String",
						"defaultValue": "clensed"
					},
					"DestinationStore_Directory": {
						"type": "String",
						"defaultValue": "sales_data"
					}
				},
				"folder": {
					"name": "Practice"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-09T09:54:40Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_products')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_products_staging",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_products_staging_sink",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"dimProductSource": {},
									"stageProductSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "fin_products"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_products_staging_sink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/fin_build_dim_region')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "pl_build_dim_region",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_build_region",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"finStageRegion": {},
									"finDimRegion": {},
									"dimRegion": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "fin_region"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_build_region')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/plFinProductsDim')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_DimProducts",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_finproductsDim",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceProducts": {},
									"dimProducts": {},
									"sinkDimProducts": {},
									"sinkActiveRecords": {},
									"sinkDimFinProducts": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "fin_products"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_finproductsDim')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_Build_dimStore')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Build dim Store",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "db_Build_dimStore",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"stageStore": {},
									"sourceDimStore": {},
									"dimStore": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Practice/09. Exercise"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-09T09:54:40Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/db_Build_dimStore')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_CopyAndUnzipFile')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy and unzip data",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "landing//sampledata.zip"
							},
							{
								"name": "Destination",
								"value": "raw//"
							}
						],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings",
									"compressionProperties": {
										"type": "ZipDeflateReadSettings",
										"preserveZipFileNameAsFolder": false
									}
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "zip_source",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "zip_destination",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Practice/01. Exercise"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-09T09:54:40Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/zip_source')]",
				"[concat(variables('factoryId'), '/datasets/zip_destination')]"
			]
		}
	]
}