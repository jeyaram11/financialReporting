{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "jtechfinance-adf"
		},
		"AzureBlobStorage_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage'"
		},
		"AzureSqlDatabase1_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'AzureSqlDatabase1'"
		},
		"ls_dbr_j_techfinance_accessToken": {
			"type": "secureString",
			"metadata": "Secure string for 'accessToken' of 'ls_dbr_j_techfinance'"
		},
		"ls_sql_jtechfinance_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'ls_sql_jtechfinance'"
		},
		"AzureSqlDatabase1_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "jtechfinance-sql.database.windows.net"
		},
		"AzureSqlDatabase1_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "jtechfinance-sqldb"
		},
		"AzureSqlDatabase1_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "jtechfinance-admin"
		},
		"ls_jtechfinance_dev_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://jtechfinance.dfs.core.windows.net/"
		},
		"ls_jtechfinance_kv_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://jtechfinance-kv.vault.azure.net/"
		},
		"ls_sql_jtechfinance_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "jtechfinance-sql.database.windows.net"
		},
		"ls_sql_jtechfinance_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "jtechfinance-sqldb"
		},
		"ls_sql_jtechfinance_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "jtechfinance-admin"
		},
		"tr_event_load_newfiles_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/dd9b8fc9-6ca7-4bfd-b0ba-d437fd2e66e8/resourceGroups/jtechfinance-rg/providers/Microsoft.Storage/storageAccounts/jtechfinance"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/MoveFiles')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Move files from one folder to another folder",
				"activities": [
					{
						"name": "GetFileList",
						"description": "Get the list of file",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "BinaryDataSource_Folder",
								"type": "DatasetReference",
								"parameters": {
									"Container": {
										"value": "@pipeline().parameters.SourceStore_Location",
										"type": "Expression"
									},
									"Directory": {
										"value": "@pipeline().parameters.SourceStore_Directory",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "ForEachFile",
						"description": "Iterate each file, and move them one by one.",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FilterFiles",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FilterFiles').output.value",
								"type": "Expression"
							},
							"batchCount": 20,
							"activities": [
								{
									"name": "CopyAFile",
									"description": "Copy a file from the source store to the destination store.",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											},
											"recursive": false
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											}
										},
										"enableStaging": false,
										"dataIntegrationUnits": 0
									},
									"inputs": [
										{
											"referenceName": "BinaryDataSource_File",
											"type": "DatasetReference",
											"parameters": {
												"Container": {
													"value": "@pipeline().parameters.SourceStore_Location",
													"type": "Expression"
												},
												"Directory": {
													"value": "@pipeline().parameters.SourceStore_Directory",
													"type": "Expression"
												},
												"filename": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "BinaryDataDestination",
											"type": "DatasetReference",
											"parameters": {
												"Container": {
													"value": "@pipeline().parameters.DestinationStore_Location",
													"type": "Expression"
												},
												"Directory": {
													"value": "@pipeline().parameters.DestinationStore_Directory",
													"type": "Expression"
												},
												"filename": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "DeleteAFile",
									"description": "Delete a file from the source store",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "CopyAFile",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "BinaryDataSource_File",
											"type": "DatasetReference",
											"parameters": {
												"Container": {
													"value": "@pipeline().parameters.SourceStore_Location",
													"type": "Expression"
												},
												"Directory": {
													"value": "@pipeline().parameters.SourceStore_Directory",
													"type": "Expression"
												},
												"filename": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true
										}
									}
								}
							]
						}
					},
					{
						"name": "FilterFiles",
						"description": "Only files will be selected, the source-folders will not be selected.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "GetFileList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetFileList').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(contains(item().name, 'Celeste'), not(contains(item().name,'Error')))",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"SourceStore_Location": {
						"type": "String",
						"defaultValue": "clensed"
					},
					"SourceStore_Directory": {
						"type": "String"
					},
					"DestinationStore_Location": {
						"type": "String",
						"defaultValue": "clensed"
					},
					"DestinationStore_Directory": {
						"type": "String",
						"defaultValue": "sales_data"
					}
				},
				"folder": {
					"name": "Practice"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-09T09:54:40Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/BinaryDataSource_Folder')]",
				"[concat(variables('factoryId'), '/datasets/BinaryDataSource_File')]",
				"[concat(variables('factoryId'), '/datasets/BinaryDataDestination')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_products')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_products_staging",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_products_staging_sink",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"dimProductSource": {},
									"stageProductSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "fin_products"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_products_staging_sink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/fin_build_dim_region')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "pl_build_dim_region",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_build_region",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"finStageRegion": {},
									"finDimRegion": {},
									"dimRegion": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "fin_region"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_build_region')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/plFinProductsDim')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_DimProducts",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_finproductsDim",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceProducts": {},
									"dimProducts": {},
									"sinkDimProducts": {},
									"sinkActiveRecords": {},
									"sinkDimFinProducts": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "fin_products"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_finproductsDim')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_Build_dimStore')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Build dim Store",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "db_Build_dimStore",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"stageStore": {},
									"sourceDimStore": {},
									"dimStore": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Practice/09. Exercise"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-09T09:54:40Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/db_Build_dimStore')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_CopyAndUnzipFile')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy and unzip data",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "landing//sampledata.zip"
							},
							{
								"name": "Destination",
								"value": "raw//"
							}
						],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings",
									"compressionProperties": {
										"type": "ZipDeflateReadSettings",
										"preserveZipFileNameAsFolder": false
									}
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "zip_source",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "zip_destination",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Practice/01. Exercise"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-09T09:54:40Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/zip_source')]",
				"[concat(variables('factoryId'), '/datasets/zip_destination')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_CopyMasterDataToCleansed')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy Master To Cleansed",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": "sampledata/MasterData",
									"wildcardFileName": "*.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": "*.csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "abs_csv_raw_masterdata",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "abs_csv_cleansed_masterdata_v2",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Practice/07. Exercise"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-09T09:54:40Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/abs_csv_raw_masterdata')]",
				"[concat(variables('factoryId'), '/datasets/abs_csv_cleansed_masterdata_v2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_CopyProductDataToCleansed')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy Product Data To Cleansed",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": "sampledata/ProductData",
									"wildcardFileName": "*.csv",
									"deleteFilesAfterCompletion": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "abs_binary_raw_productdata",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "abs_binary_cleansed_productdata",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Practice/07. Exercise"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-09T09:54:40Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/abs_binary_raw_productdata')]",
				"[concat(variables('factoryId'), '/datasets/abs_binary_cleansed_productdata')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_Copy_RawToCleansed_Sales')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy Raw to cleansed Sales",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "raw/sampledata/Arancione/"
							},
							{
								"name": "Destination",
								"value": "clensed/sales_data/"
							}
						],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"skipLineCount": 0
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"validateDataConsistency": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "abs_csv_raw_sales",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "abs_csv_raw_cleased_sales",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Practice/02. Exercise"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-09T09:54:40Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/abs_csv_raw_sales')]",
				"[concat(variables('factoryId'), '/datasets/abs_csv_raw_cleased_sales')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_Copy_RawToCleansed_Sales_Celeste')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data Flow Copy Raw to Cleansed Celetse",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Copy_RawToCleansed_Sales_Celesete",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceCSVCeleste": {},
									"sinkCSVCleansedCeleste": {},
									"sinkErrorLog": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Practice/05. Exercise"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-09T09:54:41Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_Copy_RawToCleansed_Sales_Celesete')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_Copy_RawToCleansed_Sales_Celeste_ex3')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data Flow Copy Raw to Cleansed Celetse",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Copy_RawToCleansed_Sales_Celesete_ex3",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceCSVCeleste": {},
									"sinkCSVCleansedCeleste": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Practice/03. Exercise"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-09T09:54:41Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_Copy_RawToCleansed_Sales_Celesete_ex3')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_Copy_RawToCleansed_Sales_Celeste_ex4')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data Flow Copy Raw to Cleansed Celetse",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Copy_RawToCleansed_Sales_Celesete_ex4",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceCSVCeleste": {},
									"sinkCSVCleansedCeleste": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Practice/04 .Exercise"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-09T09:54:41Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_Copy_RawToCleansed_Sales_Celesete_ex4')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_Copy_RawToCleansed_Sales_Celeste_ex5_copy1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data Flow Copy Raw to Cleansed Celetse",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Copy_RawToCleansed_Sales_Celesete",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceCSVCeleste": {},
									"sinkCSVCleansedCeleste": {},
									"sinkErrorLog": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Practice/05. Exercise"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-09T09:54:41Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_Copy_RawToCleansed_Sales_Celesete')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_Copy_RawToCleansed_Sales_Celeste_ex6')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data Flow Copy Raw to Cleansed Celetse",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Copy_RawToCleansed_Sales_Celesete_ex6",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceCSVCeleste": {},
									"sinkCSVCleansedCeleste": {},
									"sinkErrorLog": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "failOnError",
						"type": "Fail",
						"dependsOn": [
							{
								"activity": "Data Flow Copy Raw to Cleansed Celetse",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"message": {
								"value": "@activity('Data Flow Copy Raw to Cleansed Celetse').error.message",
								"type": "Expression"
							},
							"errorCode": "5000"
						}
					},
					{
						"name": "Set Error Message",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "failOnError",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "ErrorMessage",
							"value": {
								"value": "@activity('failOnError').error.message",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Error Code",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "failOnError",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "ErrorCode",
							"value": {
								"value": "@activity('failOnError').error.errorCode",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Write Error Log",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set Error Message",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set Error Code",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "ErrorCode",
										"value": {
											"value": "@variables('ErrorCode')",
											"type": "Expression"
										}
									},
									{
										"name": "ErrorMessage",
										"value": {
											"value": "@variables('ErrorMessage')",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "ErrorCode",
											"type": "String"
										},
										"sink": {
											"name": "ErrorCode",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "ErrorMessage",
											"type": "String"
										},
										"sink": {
											"name": "ErrorMessage",
											"type": "String",
											"physicalType": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SinkLongFile",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SinkError",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"ErrorMessage": {
						"type": "String",
						"defaultValue": "test"
					},
					"ErrorCode": {
						"type": "String",
						"defaultValue": "123"
					}
				},
				"folder": {
					"name": "Practice/06. Exercise"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-09T09:54:41Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_Copy_RawToCleansed_Sales_Celesete_ex6')]",
				"[concat(variables('factoryId'), '/datasets/SinkLongFile')]",
				"[concat(variables('factoryId'), '/datasets/SinkError')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_Copy_RawtoCleansed_Sales_Verde')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetFileList",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ads_json_raw_Verde",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "JsonReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetFileList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetFileList').output.childItems",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "copyJsonToCSV_Verde",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings",
												"copyBehavior": "FlattenHierarchy"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"path": "$['YearMonth']"
													},
													"sink": {
														"name": "SalesMonth",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['StoreName']"
													},
													"sink": {
														"name": "OnlineRetailer",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['Sales']['Product']"
													},
													"sink": {
														"name": "Title",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['Sales']['Vintage']"
													},
													"sink": {
														"name": "Vintage"
													}
												},
												{
													"source": {
														"path": "$['Sales']['Variety']"
													},
													"sink": {
														"name": "Variety"
													}
												},
												{
													"source": {
														"path": "$['Sales']['Score']"
													},
													"sink": {
														"name": "Score"
													}
												},
												{
													"source": {
														"path": "$['Sales']['SalesPrice']"
													},
													"sink": {
														"name": "ListPrice",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['Sales']['SalesQty']"
													},
													"sink": {
														"name": "Quantity",
														"type": "String"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "abs_json_raw_Verde_param",
											"type": "DatasetReference",
											"parameters": {
												"filename": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "abs_csb_cleansed_Verde_param",
											"type": "DatasetReference",
											"parameters": {
												"destfilename": {
													"value": "@concat(substring(item().name,0,sub(length(item().name),5)), '.csv')",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Practice/02. Exercise"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-09T09:54:40Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ads_json_raw_Verde')]",
				"[concat(variables('factoryId'), '/datasets/abs_json_raw_Verde_param')]",
				"[concat(variables('factoryId'), '/datasets/abs_csb_cleansed_Verde_param')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_LoadStaging_MasterAndProduct')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetMetadata",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT * FROM dbo.ADF_Metadata where FolderName in ('masterdata','productdata')",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "sql_stage_dynamic",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "_notSet"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Loop over Metadata",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetMetadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetMetadata').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "LoadDataToSQL",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"wildcardFolderPath": {
													"value": "@item().FolderName",
													"type": "Expression"
												},
												"wildcardFileName": {
													"value": "@item().FileName",
													"type": "Expression"
												},
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"preCopyScript": {
												"value": "TRUNCATE TABLE stage.@{item().TableName}",
												"type": "Expression"
											},
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "abs_csv_cleansed_stage",
											"type": "DatasetReference",
											"parameters": {
												"FolderName": {
													"value": "@item().FolderName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@item().FileName",
													"type": "Expression"
												},
												"Delimiter": {
													"value": "@item().Delimiter",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "sql_stage_dynamic",
											"type": "DatasetReference",
											"parameters": {
												"TableName": {
													"value": "@item().TableName",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Practice/08. Exercise"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-09T09:54:40Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/sql_stage_dynamic')]",
				"[concat(variables('factoryId'), '/datasets/abs_csv_cleansed_stage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_LoadStaging_Product')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Load stageproduct",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_LoadStageProduct]"
						},
						"linkedServiceName": {
							"referenceName": "ls_sql_jtechfinance",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Practice/08. Exercise"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-09T09:54:39Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_jtechfinance')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_LoadStaging_Sales')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Load stageSales",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_LoadStageSales]"
						},
						"linkedServiceName": {
							"referenceName": "ls_sql_jtechfinance",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Practice/08. Exercise"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-09T09:54:39Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_jtechfinance')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_LoadStaging_Transactions')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetMetadata",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "TruncateStageSales",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT * FROM dbo.ADF_Metadata where FolderName in ('sales_data')",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "sql_stage_dynamic",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "_notSet"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Loop over Metadata",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetMetadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetMetadata').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "LoadDataToSQL",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"wildcardFolderPath": {
													"value": "@item().FolderName",
													"type": "Expression"
												},
												"wildcardFileName": {
													"value": "@item().FileName",
													"type": "Expression"
												},
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "abs_csv_cleansed_stage",
											"type": "DatasetReference",
											"parameters": {
												"FolderName": {
													"value": "@item().FolderName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@item().FileName",
													"type": "Expression"
												},
												"Delimiter": {
													"value": "@item().Delimiter",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "sql_stage_dynamic",
											"type": "DatasetReference",
											"parameters": {
												"TableName": {
													"value": "@item().TableName",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "TruncateStageSales",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "TRUNCATE TABLE stage.Arancione_Sales\r\nTRUNCATE TABLE stage.Verde_Sales\r\nTRUNCATE TABLE stage.Celeste_Sales\r\nSELECT count(*) FROM stage.Arancione_Sales",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "sql_stage_dynamic",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "_notSet"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Practice/08. Exercise"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-09T09:54:40Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/sql_stage_dynamic')]",
				"[concat(variables('factoryId'), '/datasets/abs_csv_cleansed_stage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_buildFacts')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Stored procedure1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_Load_FactSales]"
						},
						"linkedServiceName": {
							"referenceName": "ls_sql_jtechfinance",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Practice/09. Exercise"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-09T09:54:39Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_jtechfinance')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_build_dimCurrency')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Stored procedure",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_Load_dimCurrency]"
						},
						"linkedServiceName": {
							"referenceName": "ls_sql_jtechfinance",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Practice/09. Exercise"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-09T09:54:39Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_jtechfinance')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_build_dimDate')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Stored procedure",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_Load_dimDate]"
						},
						"linkedServiceName": {
							"referenceName": "ls_sql_jtechfinance",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Practice/09. Exercise"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-09T09:54:39Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_jtechfinance')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_build_dimProduct')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Build Dim Product",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_build_dimProduct",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"stageProduct": {},
									"sourceDimProduct": {},
									"InsertNewProducts": {},
									"setInactiveProduct": {},
									"setActiveRows": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Practice/09. Exercise"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-09T09:54:40Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_build_dimProduct')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_build_dimTerritory')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Stored procedure",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_Load_dimTerritory]"
						},
						"linkedServiceName": {
							"referenceName": "ls_sql_jtechfinance",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Practice/09. Exercise"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-09T09:54:39Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_jtechfinance')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_build_dimensions_Type1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Load dimStore",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_Load_dimStore]"
						},
						"linkedServiceName": {
							"referenceName": "ls_sql_jtechfinance",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Practice/09. Exercise"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-09T09:54:39Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_jtechfinance')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_build_dimensions_Type2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Load dimProduct",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_Load_dimProduct]"
						},
						"linkedServiceName": {
							"referenceName": "ls_sql_jtechfinance",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Practice"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-09T09:54:39Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_jtechfinance')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_load_dimStore')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Load dimStore DeltaTable",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Users/jey.wkit@gmail.com/j-techfinance/elt/load_dimStore"
						},
						"linkedServiceName": {
							"referenceName": "ls_dbr_j_techfinance",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Practice/10 - Exercise"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-09T09:54:39Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_dbr_j_techfinance')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_load_regions_staging')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "finRegionDataFlow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "finRegionStagingPipeline",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"finRegionSource": {},
									"finRegionstaging": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "fin_region"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/finRegionStagingPipeline')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_masterSales')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy Store Sales To Cleansed",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_Copy_RawToCleansed_Sales",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Load Cleansed Sales to Staging",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Copy Store Sales To Cleansed",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_LoadStaging_Transactions",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Practice"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-09T09:54:41Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_Copy_RawToCleansed_Sales')]",
				"[concat(variables('factoryId'), '/pipelines/pl_LoadStaging_Transactions')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_master_schedule')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy Raw to Cleansed",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_Copy_RawToCleansed_Sales",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Practice"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-09T09:54:41Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_Copy_RawToCleansed_Sales')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Practice"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "StoreList"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sql_jtechfinance",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Practice"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ProductId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProductNo",
						"type": "nvarchar"
					},
					{
						"name": "ProductName",
						"type": "nvarchar"
					},
					{
						"name": "Province",
						"type": "nvarchar"
					},
					{
						"name": "Region",
						"type": "nvarchar"
					},
					{
						"name": "Type",
						"type": "nvarchar"
					},
					{
						"name": "Winery",
						"type": "nchar"
					},
					{
						"name": "Vintage",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "Score",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "DealerPrice",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Markup",
						"type": "float",
						"precision": 15
					},
					{
						"name": "ListPrice",
						"type": "int",
						"precision": 10
					},
					{
						"name": "UpdatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "IsRowCurrent",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "EffectiveDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EndDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "dimProduct"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_jtechfinance')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable3')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sql_jtechfinance",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Practice"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ProductId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProductNo",
						"type": "nvarchar"
					},
					{
						"name": "ProductName",
						"type": "nvarchar"
					},
					{
						"name": "Province",
						"type": "nvarchar"
					},
					{
						"name": "Region",
						"type": "nvarchar"
					},
					{
						"name": "Type",
						"type": "nvarchar"
					},
					{
						"name": "Winery",
						"type": "nchar"
					},
					{
						"name": "Vintage",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "Score",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "DealerPrice",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Markup",
						"type": "float",
						"precision": 15
					},
					{
						"name": "ListPrice",
						"type": "int",
						"precision": 10
					},
					{
						"name": "UpdatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "IsRowCurrent",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "EffectiveDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EndDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "dimProduct"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_jtechfinance')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BinaryDataDestination')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "It describes the destination store.",
				"linkedServiceName": {
					"referenceName": "ls_jtechfinance_dev",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Container": {
						"type": "String"
					},
					"Directory": {
						"type": "String"
					},
					"filename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Practice"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@{dataset().Directory}",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@{dataset().Container}",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_jtechfinance_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BinaryDataSource_File')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "It describes the file in the data source store.",
				"linkedServiceName": {
					"referenceName": "ls_jtechfinance_dev",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Container": {
						"type": "String"
					},
					"Directory": {
						"type": "String"
					},
					"filename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Practice"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@{dataset().Directory}",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@{dataset().Container}",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_jtechfinance_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BinaryDataSource_Folder')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "It describes the folder in the data source store.",
				"linkedServiceName": {
					"referenceName": "ls_jtechfinance_dev",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Container": {
						"type": "String"
					},
					"Directory": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Practice"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@{dataset().Directory}",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@{dataset().Container}",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_jtechfinance_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_jtechfinance_dev",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Practice"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "StoreList.txt",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "StoreId",
						"type": "String"
					},
					{
						"name": "StoreName",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_jtechfinance_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ErrorLogFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_jtechfinance_dev",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Practice"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Error_File_Sink.csv",
						"fileSystem": "clensed"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_jtechfinance_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProductDimension')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sql_jtechfinance",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Practice"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ProductId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProductNo",
						"type": "nvarchar"
					},
					{
						"name": "ProductName",
						"type": "nvarchar"
					},
					{
						"name": "Province",
						"type": "nvarchar"
					},
					{
						"name": "Region",
						"type": "nvarchar"
					},
					{
						"name": "Type",
						"type": "nvarchar"
					},
					{
						"name": "Winery",
						"type": "nchar"
					},
					{
						"name": "Vintage",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "Score",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "DealerPrice",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Markup",
						"type": "float",
						"precision": 15
					},
					{
						"name": "ListPrice",
						"type": "int",
						"precision": 10
					},
					{
						"name": "UpdatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "IsRowCurrent",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "EffectiveDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EndDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "dimProduct"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_jtechfinance')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQLDimRegion')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sql_jtechfinance",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "fin_region"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "region_surr_id",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "region_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "city",
						"type": "nvarchar"
					},
					{
						"name": "country",
						"type": "nvarchar"
					},
					{
						"name": "territory",
						"type": "nvarchar"
					},
					{
						"name": "full name",
						"type": "nvarchar"
					},
					{
						"name": "InsertedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "UpdatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "fin_Regions"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_jtechfinance')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SinkError')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_jtechfinance_dev",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Practice"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "ErrorLog.csv",
						"fileSystem": "clensed"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_jtechfinance_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SinkLongFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_jtechfinance_dev",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Practice"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "error_file.csv",
						"folderPath": "sampledata/DeltaFiles",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Col1",
						"type": "String"
					},
					{
						"name": "Col2",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_jtechfinance_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/abs_binary_cleansed_productdata')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_jtechfinance_dev",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Practice"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "productdata",
						"fileSystem": "clensed"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_jtechfinance_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/abs_binary_raw_productdata')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_jtechfinance_dev",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Practice"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "sampledata/ProductData",
						"fileSystem": "raw"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_jtechfinance_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/abs_csb_cleansed_Verde_param')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_jtechfinance_dev",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"destfilename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Practice"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().destfilename",
							"type": "Expression"
						},
						"folderPath": "sales_data",
						"fileSystem": "clensed"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "OnlineRetailer",
						"type": "String"
					},
					{
						"name": "SalesMonth",
						"type": "String"
					},
					{
						"name": "Title",
						"type": "String"
					},
					{
						"name": "Vintage",
						"type": "String"
					},
					{
						"name": "Variety",
						"type": "String"
					},
					{
						"name": "Score",
						"type": "String"
					},
					{
						"name": "ListPrice",
						"type": "String"
					},
					{
						"name": "Quantity",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_jtechfinance_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/abs_csv_cleansed_celeste')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_jtechfinance_dev",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Practice"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "sales_data",
						"fileSystem": "clensed"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "OnlineRetailer",
						"type": "String"
					},
					{
						"name": "SalesMonth",
						"type": "String"
					},
					{
						"name": "Title",
						"type": "String"
					},
					{
						"name": "Vintage",
						"type": "String"
					},
					{
						"name": "Variety",
						"type": "String"
					},
					{
						"name": "Score",
						"type": "String"
					},
					{
						"name": "ListPrice",
						"type": "String"
					},
					{
						"name": "Quantity",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_jtechfinance_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/abs_csv_cleansed_celeste_errorrows_ex5')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_jtechfinance_dev",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Practice"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "clensed"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "OnlineRetailer",
						"type": "String"
					},
					{
						"name": "SalesMonth",
						"type": "String"
					},
					{
						"name": "Title",
						"type": "String"
					},
					{
						"name": "Vintage",
						"type": "String"
					},
					{
						"name": "Variety",
						"type": "String"
					},
					{
						"name": "Score",
						"type": "String"
					},
					{
						"name": "ListPrice",
						"type": "String"
					},
					{
						"name": "Quantity",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_jtechfinance_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/abs_csv_cleansed_celeste_ex3')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_jtechfinance_dev",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Practice"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "sales_data",
						"fileSystem": "clensed"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "OnlineRetailer",
						"type": "String"
					},
					{
						"name": "SalesMonth",
						"type": "String"
					},
					{
						"name": "Title",
						"type": "String"
					},
					{
						"name": "Vintage",
						"type": "String"
					},
					{
						"name": "Variety",
						"type": "String"
					},
					{
						"name": "Score",
						"type": "String"
					},
					{
						"name": "ListPrice",
						"type": "String"
					},
					{
						"name": "Quantity",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_jtechfinance_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/abs_csv_cleansed_error_sink_ex6')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_jtechfinance_dev",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Practice"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "error_sink_csv",
						"fileSystem": "clensed"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_jtechfinance_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/abs_csv_cleansed_error_sink_ex6_2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_jtechfinance_dev",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Practice"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "error_sink.csv",
						"fileSystem": "clensed"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_jtechfinance_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/abs_csv_cleansed_error_srouce_ex6')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_jtechfinance_dev",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Practice"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "error_file.csv",
						"fileSystem": "clensed"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Col1",
						"type": "String"
					},
					{
						"name": "Col2",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_jtechfinance_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/abs_csv_cleansed_masterdata_v2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_jtechfinance_dev",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Practice"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "masterdata",
						"fileSystem": "clensed"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_jtechfinance_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/abs_csv_cleansed_stage')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_jtechfinance_dev",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FolderName": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					},
					"Delimiter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Practice/08. Exercise"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().FolderName",
							"type": "Expression"
						},
						"fileSystem": "clensed"
					},
					"columnDelimiter": {
						"value": "@dataset().Delimiter",
						"type": "Expression"
					},
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_jtechfinance_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/abs_csv_raw_Celeste_ex')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_jtechfinance_dev",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Practice"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Celeste_2022_01.csv",
						"folderPath": "sampledata/Celeste",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "TransactionId",
						"type": "String"
					},
					{
						"name": "TransactionDate",
						"type": "String"
					},
					{
						"name": "OnlineRetailer",
						"type": "String"
					},
					{
						"name": "SalesMonth",
						"type": "String"
					},
					{
						"name": "SalesRegion",
						"type": "String"
					},
					{
						"name": "SalesCurrency",
						"type": "String"
					},
					{
						"name": "Title",
						"type": "String"
					},
					{
						"name": "Vintage",
						"type": "String"
					},
					{
						"name": "Variety",
						"type": "String"
					},
					{
						"name": "Score",
						"type": "String"
					},
					{
						"name": "ListPrice",
						"type": "String"
					},
					{
						"name": "Quantity",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_jtechfinance_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/abs_csv_raw_celeste')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_jtechfinance_dev",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Practice"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "sampledata/Celeste",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "TransactionId",
						"type": "String"
					},
					{
						"name": "TransactionDate",
						"type": "String"
					},
					{
						"name": "OnlineRetailer",
						"type": "String"
					},
					{
						"name": "SalesMonth",
						"type": "String"
					},
					{
						"name": "SalesRegion",
						"type": "String"
					},
					{
						"name": "SalesCurrency",
						"type": "String"
					},
					{
						"name": "Title",
						"type": "String"
					},
					{
						"name": "Vintage",
						"type": "String"
					},
					{
						"name": "Variety",
						"type": "String"
					},
					{
						"name": "Score",
						"type": "String"
					},
					{
						"name": "ListPrice",
						"type": "String"
					},
					{
						"name": "Quantity",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_jtechfinance_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/abs_csv_raw_celeste_ex3')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_jtechfinance_dev",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Practice"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Celeste_2022_09.csv",
						"folderPath": "sampledata/Celeste",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "TransactionId",
						"type": "String"
					},
					{
						"name": "TransactionDate",
						"type": "String"
					},
					{
						"name": "OnlineRetailer",
						"type": "String"
					},
					{
						"name": "SalesMonth",
						"type": "String"
					},
					{
						"name": "SalesRegion",
						"type": "String"
					},
					{
						"name": "SalesCurrency",
						"type": "String"
					},
					{
						"name": "Title",
						"type": "String"
					},
					{
						"name": "Vintage",
						"type": "String"
					},
					{
						"name": "Variety",
						"type": "String"
					},
					{
						"name": "Score",
						"type": "String"
					},
					{
						"name": "ListPrice",
						"type": "String"
					},
					{
						"name": "Quantity",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_jtechfinance_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/abs_csv_raw_cleased_sales')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_jtechfinance_dev",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Practice/02. Exercise"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "sales_data",
						"fileSystem": "clensed"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_jtechfinance_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/abs_csv_raw_masterdata')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_jtechfinance_dev",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Practice"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "sampledata/MasterData",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "CurrencyCode",
						"type": "String"
					},
					{
						"name": "CurrencyName",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_jtechfinance_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/abs_csv_raw_sales')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_jtechfinance_dev",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Practice/02. Exercise"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "sampledata/Arancione",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "OnlineRetailer",
						"type": "String"
					},
					{
						"name": "SalesMonth",
						"type": "String"
					},
					{
						"name": "Title",
						"type": "String"
					},
					{
						"name": "Vintage",
						"type": "String"
					},
					{
						"name": "Variety",
						"type": "String"
					},
					{
						"name": "Score",
						"type": "String"
					},
					{
						"name": "ListPrice",
						"type": "String"
					},
					{
						"name": "Quantity",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_jtechfinance_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/abs_json_raw_Verde_param')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_jtechfinance_dev",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Practice"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": "sampledata/Verde",
						"fileSystem": "raw"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"YearMonth": {
							"type": "string"
						},
						"StoreName": {
							"type": "string"
						},
						"Sales": {
							"type": "object",
							"properties": {
								"Product": {
									"type": "string"
								},
								"Vintage": {
									"type": "string"
								},
								"Variety": {
									"type": "string"
								},
								"Score": {
									"type": "string"
								},
								"SalesPrice": {
									"type": "string"
								},
								"SalesQty": {
									"type": "string"
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_jtechfinance_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ads_json_raw_Verde')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_jtechfinance_dev",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Practice"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "sampledata/Verde",
						"fileSystem": "raw"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"YearMonth": {
							"type": "string"
						},
						"StoreName": {
							"type": "string"
						},
						"Sales": {
							"type": "object",
							"properties": {
								"Product": {
									"type": "string"
								},
								"Vintage": {
									"type": "string"
								},
								"Variety": {
									"type": "string"
								},
								"Score": {
									"type": "string"
								},
								"SalesPrice": {
									"type": "string"
								},
								"SalesQty": {
									"type": "string"
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_jtechfinance_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dimProduct')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sql_jtechfinance",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Practice"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ProductId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProductNo",
						"type": "nvarchar"
					},
					{
						"name": "ProductName",
						"type": "nvarchar"
					},
					{
						"name": "Province",
						"type": "nvarchar"
					},
					{
						"name": "Region",
						"type": "nvarchar"
					},
					{
						"name": "Type",
						"type": "nvarchar"
					},
					{
						"name": "Winery",
						"type": "nchar"
					},
					{
						"name": "Vintage",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "Score",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "DealerPrice",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Markup",
						"type": "float",
						"precision": 15
					},
					{
						"name": "ListPrice",
						"type": "int",
						"precision": 10
					},
					{
						"name": "UpdatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "IsRowCurrent",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "EffectiveDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EndDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "dimProduct"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_jtechfinance')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/finRegionSourceExcel')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "fin_region"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Regions",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "regions.xlsx",
						"folderPath": "dimensions",
						"container": "raw"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "Index",
						"type": "String"
					},
					{
						"name": "City",
						"type": "String"
					},
					{
						"name": "Country",
						"type": "String"
					},
					{
						"name": "Territory",
						"type": "String"
					},
					{
						"name": "Full Name",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/finRegionStageSQL')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sql_jtechfinance",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "fin_region"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "region_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "city",
						"type": "nvarchar"
					},
					{
						"name": "country",
						"type": "nvarchar"
					},
					{
						"name": "territory",
						"type": "nvarchar"
					},
					{
						"name": "full name",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "stage",
					"table": "fin_Regions"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_jtechfinance')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/fin_dim_products')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sql_jtechfinance",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "product_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "product_no",
						"type": "int",
						"precision": 10
					},
					{
						"name": "product_name",
						"type": "nvarchar"
					},
					{
						"name": "UpdatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "IsRowCurrent",
						"type": "bit"
					},
					{
						"name": "EffectiveDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EndDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "fin_Products"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_jtechfinance')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/fin_staging_products')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sql_jtechfinance",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "product_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "product_name",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "stage",
					"table": "fin_Products"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_jtechfinance')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/productSource')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Products",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "products.xlsx",
						"folderPath": "dimensions",
						"container": "raw"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "Index",
						"type": "String"
					},
					{
						"name": "Product Name",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_dim_store')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sql_jtechfinance",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Practice"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "StoreId",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "StoreName",
						"type": "nvarchar"
					},
					{
						"name": "StoreType",
						"type": "nvarchar"
					},
					{
						"name": "Description",
						"type": "nvarchar"
					},
					{
						"name": "InsertedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "UpdatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "dimStore"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_jtechfinance')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_stage_dynamic')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sql_jtechfinance",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TableName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Practice/08. Exercise"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "stage",
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_jtechfinance')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_stage_product')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sql_jtechfinance",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Practice"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ProductNo",
						"type": "nvarchar"
					},
					{
						"name": "Country",
						"type": "nvarchar"
					},
					{
						"name": "Score",
						"type": "nvarchar"
					},
					{
						"name": "DealerPrice",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Markup",
						"type": "float",
						"precision": 15
					},
					{
						"name": "ListPrice",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Province",
						"type": "nvarchar"
					},
					{
						"name": "Region_1",
						"type": "nvarchar"
					},
					{
						"name": "Title",
						"type": "nvarchar"
					},
					{
						"name": "Vintage",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "Varietal",
						"type": "nvarchar"
					},
					{
						"name": "Winery",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "dimProduct"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_jtechfinance')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_stage_product_table')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sql_jtechfinance",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Practice"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ProductNo",
						"type": "nvarchar"
					},
					{
						"name": "Country",
						"type": "nvarchar"
					},
					{
						"name": "Score",
						"type": "nvarchar"
					},
					{
						"name": "DealerPrice",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Markup",
						"type": "float",
						"precision": 15
					},
					{
						"name": "ListPrice",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Province",
						"type": "nvarchar"
					},
					{
						"name": "Region_1",
						"type": "nvarchar"
					},
					{
						"name": "Title",
						"type": "nvarchar"
					},
					{
						"name": "Vintage",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "Varietal",
						"type": "nvarchar"
					},
					{
						"name": "Winery",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "stage",
					"table": "Product"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_jtechfinance')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_stage_region')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sql_jtechfinance",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "fin_region"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "region_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "city",
						"type": "nvarchar"
					},
					{
						"name": "country",
						"type": "nvarchar"
					},
					{
						"name": "territory",
						"type": "nvarchar"
					},
					{
						"name": "full name",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "stage",
					"table": "fin_Regions"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_jtechfinance')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_stage_store')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sql_jtechfinance",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Practice"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "StoreName",
						"type": "nvarchar"
					},
					{
						"name": "StoreType",
						"type": "nvarchar"
					},
					{
						"name": "Description",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "stage",
					"table": "Store"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_jtechfinance')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/zip_destination')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_jtechfinance_dev",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Practice/01. Exercise"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "raw"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_jtechfinance_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/zip_source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_jtechfinance_dev",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Practice/01. Exercise"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "sampledata.zip",
						"fileSystem": "landing"
					},
					"compression": {
						"type": "ZipDeflate"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_jtechfinance_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('AzureSqlDatabase1_properties_typeProperties_server')]",
					"database": "[parameters('AzureSqlDatabase1_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('AzureSqlDatabase1_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('AzureSqlDatabase1_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_dbr_j_techfinance')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDatabricks",
				"typeProperties": {
					"domain": "https://adb-1066298791433275.15.azuredatabricks.net",
					"accessToken": {
						"type": "SecureString",
						"value": "[parameters('ls_dbr_j_techfinance_accessToken')]"
					},
					"newClusterNodeType": "Standard_DS3_v2",
					"newClusterNumOfWorker": "1",
					"newClusterSparkEnvVars": {
						"PYSPARK_PYTHON": "/databricks/python3/bin/python3"
					},
					"newClusterVersion": "13.3.x-scala2.12",
					"clusterOption": "Fixed",
					"newClusterInitScripts": []
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_jtechfinance_dev')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_jtechfinance_dev_properties_typeProperties_url')]",
					"accountKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "ls_jtechfinance_kv",
							"type": "LinkedServiceReference"
						},
						"secretName": "jtechfinance-dev"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_jtechfinance_kv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_jtechfinance_kv')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('ls_jtechfinance_kv_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_sql_jtechfinance')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('ls_sql_jtechfinance_properties_typeProperties_server')]",
					"database": "[parameters('ls_sql_jtechfinance_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('ls_sql_jtechfinance_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('ls_sql_jtechfinance_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/tr_event_load_newfiles')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pl_masterSales",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/raw/blobs/sampledata/Arancione/",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('tr_event_load_newfiles_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_masterSales')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tr_schedule_copysales')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pl_master_schedule",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2024-11-23T15:53:00",
						"endTime": "2024-11-24T15:53:00",
						"timeZone": "GMT Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_master_schedule')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/integrationRuntime1')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Practice/03. Exercise"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedText1",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          StoreId as integer,",
						"          StoreName as string,",
						"          OnlineStore as boolean",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          StoreId as string,",
						"          StoreName as string",
						"     ),",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable1')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedText1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/db_Build_dimStore')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Practice"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "sql_stage_store",
								"type": "DatasetReference"
							},
							"name": "stageStore"
						},
						{
							"dataset": {
								"referenceName": "sql_dim_store",
								"type": "DatasetReference"
							},
							"name": "sourceDimStore"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sql_dim_store",
								"type": "DatasetReference"
							},
							"name": "dimStore"
						}
					],
					"transformations": [
						{
							"name": "checkStoreExists"
						},
						{
							"name": "setInsertUpdateDates"
						},
						{
							"name": "UpdateOrInsert"
						}
					],
					"scriptLines": [
						"source(output(",
						"          StoreName as string,",
						"          StoreType as string,",
						"          Description as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> stageStore",
						"source(output(",
						"          StoreId as integer,",
						"          StoreName as string,",
						"          StoreType as string,",
						"          Description as string,",
						"          InsertedDate as timestamp,",
						"          UpdatedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> sourceDimStore",
						"stageStore, sourceDimStore lookup(stageStore@StoreName == sourceDimStore@StoreName,",
						"     multiple: true,",
						"     broadcast: 'auto')~> checkStoreExists",
						"checkStoreExists derive(InsertedDate = iif(isNull(InsertedDate),currentTimestamp(),InsertedDate),",
						"          UpdatedDate = currentTimestamp()) ~> setInsertUpdateDates",
						"setInsertUpdateDates alterRow(upsertIf(true())) ~> UpdateOrInsert",
						"UpdateOrInsert sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          StoreId as integer,",
						"          StoreName as string,",
						"          StoreType as string,",
						"          Description as string,",
						"          InsertedDate as timestamp,",
						"          UpdatedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['StoreName'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          StoreName = stageStore@StoreName,",
						"          StoreType = stageStore@StoreType,",
						"          Description = stageStore@Description,",
						"          InsertedDate,",
						"          UpdatedDate",
						"     )) ~> dimStore"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/sql_stage_store')]",
				"[concat(variables('factoryId'), '/datasets/sql_dim_store')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Copy_RawToCleansed_Sales_Celesete')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Practice/05. Exercise"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "abs_csv_raw_celeste",
								"type": "DatasetReference"
							},
							"name": "SourceCSVCeleste"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "abs_csv_cleansed_celeste",
								"type": "DatasetReference"
							},
							"name": "sinkCSVCleansedCeleste"
						},
						{
							"dataset": {
								"referenceName": "abs_csv_cleansed_celeste_errorrows_ex5",
								"type": "DatasetReference"
							},
							"name": "sinkErrorLog"
						}
					],
					"transformations": [
						{
							"name": "RemoveZeroValues",
							"flowlet": {
								"referenceName": "fl_RemoveZeroValues",
								"type": "DataFlowReference",
								"parameters": {}
							}
						},
						{
							"name": "filtersummaryLine"
						},
						{
							"name": "AggregateDailySales"
						},
						{
							"name": "AddFileNameColumn"
						},
						{
							"name": "CheckSalesRegion"
						},
						{
							"name": "AddErrorRow"
						},
						{
							"name": "splitCleanandErrorRows"
						},
						{
							"name": "addErrorFileName"
						}
					],
					"scriptLines": [
						"source(output(",
						"          TransactionId as string,",
						"          TransactionDate as string,",
						"          OnlineRetailer as string,",
						"          SalesMonth as string,",
						"          SalesRegion as string,",
						"          SalesCurrency as string,",
						"          Title as string,",
						"          Vintage as string,",
						"          Variety as string,",
						"          Score as string,",
						"          ListPrice as string,",
						"          Quantity as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SourceCSVCeleste",
						"AggregateDailySales compose(mapColumn(",
						"          OnlineRetailer,",
						"          SalesMonth,",
						"          SalesRegion,",
						"          SalesCurrency,",
						"          Title,",
						"          Vintage,",
						"          Variety,",
						"          Score,",
						"          ListPrice,",
						"          Quantity,",
						"          FileName",
						"     ),",
						"     composition: 'fl_RemoveZeroValues') ~> RemoveZeroValues@(outputCSVCleansedCeleste)",
						"AddFileNameColumn filter(left(TransactionDate,21) != 'Total Sales Quantity:') ~> filtersummaryLine",
						"filtersummaryLine aggregate(groupBy(OnlineRetailer,",
						"          SalesMonth,",
						"          SalesRegion,",
						"          SalesCurrency,",
						"          Title,",
						"          Vintage,",
						"          Variety,",
						"          Score,",
						"          ListPrice,",
						"          FileName),",
						"     Quantity = sum(toInteger(Quantity))) ~> AggregateDailySales",
						"SourceCSVCeleste derive(FileName = concat(OnlineRetailer, '_', substring(SalesMonth, 1, 4), '_',substring(SalesMonth, 6, 2),'.csv')) ~> AddFileNameColumn",
						"RemoveZeroValues@outputCSVCleansedCeleste assert(expectTrue(or(SalesRegion == 'EU', SalesRegion == 'UK'), false, 'assertSalesRegion')) ~> CheckSalesRegion",
						"CheckSalesRegion derive(IsErrorRow = isError(),",
						"          hasErrorRow = hasError('assertSalesRegion')) ~> AddErrorRow",
						"AddErrorRow split(IsErrorRow == false(),",
						"     disjoint: false) ~> splitCleanandErrorRows@(CleanRows, ErrorRows)",
						"splitCleanandErrorRows@ErrorRows derive(ErrorFileName = concat('Error', FileName)) ~> addErrorFileName",
						"splitCleanandErrorRows@CleanRows sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          OnlineRetailer as string,",
						"          SalesMonth as string,",
						"          Title as string,",
						"          Vintage as string,",
						"          Variety as string,",
						"          Score as string,",
						"          ListPrice as string,",
						"          Quantity as string",
						"     ),",
						"     rowUrlColumn:'FileName',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          OnlineRetailer,",
						"          SalesMonth,",
						"          Title,",
						"          Vintage,",
						"          Variety,",
						"          Score,",
						"          ListPrice,",
						"          Quantity",
						"     )) ~> sinkCSVCleansedCeleste",
						"addErrorFileName sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          OnlineRetailer as string,",
						"          SalesMonth as string,",
						"          Title as string,",
						"          Vintage as string,",
						"          Variety as string,",
						"          Score as string,",
						"          ListPrice as string,",
						"          Quantity as string",
						"     ),",
						"     rowUrlColumn:'ErrorFileName',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkErrorLog"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/fl_RemoveZeroValues')]",
				"[concat(variables('factoryId'), '/datasets/abs_csv_raw_celeste')]",
				"[concat(variables('factoryId'), '/datasets/abs_csv_cleansed_celeste')]",
				"[concat(variables('factoryId'), '/datasets/abs_csv_cleansed_celeste_errorrows_ex5')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Copy_RawToCleansed_Sales_Celesete_ex3')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Practice/03. Exercise"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "abs_csv_raw_celeste_ex3",
								"type": "DatasetReference"
							},
							"name": "SourceCSVCeleste"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "abs_csv_cleansed_celeste_ex3",
								"type": "DatasetReference"
							},
							"name": "sinkCSVCleansedCeleste"
						}
					],
					"transformations": [
						{
							"name": "filtersummaryLine"
						},
						{
							"name": "AggregateDailySales"
						},
						{
							"name": "AddFileNameColumn"
						}
					],
					"scriptLines": [
						"source(output(",
						"          TransactionId as string,",
						"          TransactionDate as string,",
						"          OnlineRetailer as string,",
						"          SalesMonth as string,",
						"          SalesRegion as string,",
						"          SalesCurrency as string,",
						"          Title as string,",
						"          Vintage as string,",
						"          Variety as string,",
						"          Score as string,",
						"          ListPrice as string,",
						"          Quantity as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SourceCSVCeleste",
						"AddFileNameColumn filter(left(TransactionDate,21) != 'Total Sales Quantity:') ~> filtersummaryLine",
						"filtersummaryLine aggregate(groupBy(OnlineRetailer,",
						"          SalesMonth,",
						"          SalesRegion,",
						"          SalesCurrency,",
						"          Title,",
						"          Vintage,",
						"          Score,",
						"          ListPrice,",
						"          FileName),",
						"     Quantity = sum(toInteger(Quantity))) ~> AggregateDailySales",
						"SourceCSVCeleste derive(FileName = concat(OnlineRetailer, '_', substring(SalesMonth, 1, 4), '_',substring(SalesMonth, 6, 2))) ~> AddFileNameColumn",
						"AggregateDailySales sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          OnlineRetailer as string,",
						"          SalesMonth as string,",
						"          Title as string,",
						"          Vintage as string,",
						"          Variety as string,",
						"          Score as string,",
						"          ListPrice as string,",
						"          Quantity as string",
						"     ),",
						"     rowUrlColumn:'FileName',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkCSVCleansedCeleste"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/abs_csv_raw_celeste_ex3')]",
				"[concat(variables('factoryId'), '/datasets/abs_csv_cleansed_celeste_ex3')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Copy_RawToCleansed_Sales_Celesete_ex4')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Practice/04. Exercise"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "abs_csv_raw_celeste_ex3",
								"type": "DatasetReference"
							},
							"name": "SourceCSVCeleste"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "abs_csv_cleansed_celeste_ex3",
								"type": "DatasetReference"
							},
							"name": "sinkCSVCleansedCeleste"
						}
					],
					"transformations": [
						{
							"name": "RemoveZeroValues",
							"flowlet": {
								"referenceName": "fl_RemoveZeroValues",
								"type": "DataFlowReference",
								"parameters": {}
							}
						},
						{
							"name": "filtersummaryLine"
						},
						{
							"name": "AggregateDailySales"
						},
						{
							"name": "AddFileNameColumn"
						}
					],
					"scriptLines": [
						"source(output(",
						"          TransactionId as string,",
						"          TransactionDate as string,",
						"          OnlineRetailer as string,",
						"          SalesMonth as string,",
						"          SalesRegion as string,",
						"          SalesCurrency as string,",
						"          Title as string,",
						"          Vintage as string,",
						"          Variety as string,",
						"          Score as string,",
						"          ListPrice as string,",
						"          Quantity as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SourceCSVCeleste",
						"AggregateDailySales compose(mapColumn(",
						"          OnlineRetailer,",
						"          SalesMonth,",
						"          SalesRegion,",
						"          SalesCurrency,",
						"          Title,",
						"          Vintage,",
						"          Variety,",
						"          Score,",
						"          ListPrice,",
						"          Quantity,",
						"          FileName",
						"     ),",
						"     composition: 'fl_RemoveZeroValues') ~> RemoveZeroValues@(outputCSVCleansedCeleste)",
						"AddFileNameColumn filter(left(TransactionDate,21) != 'Total Sales Quantity:') ~> filtersummaryLine",
						"filtersummaryLine aggregate(groupBy(OnlineRetailer,",
						"          SalesMonth,",
						"          SalesRegion,",
						"          SalesCurrency,",
						"          Title,",
						"          Vintage,",
						"          Variety,",
						"          Score,",
						"          ListPrice,",
						"          FileName),",
						"     Quantity = sum(toInteger(Quantity))) ~> AggregateDailySales",
						"SourceCSVCeleste derive(FileName = concat(OnlineRetailer, '_', substring(SalesMonth, 1, 4), '_',substring(SalesMonth, 6, 2))) ~> AddFileNameColumn",
						"RemoveZeroValues@outputCSVCleansedCeleste sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          OnlineRetailer as string,",
						"          SalesMonth as string,",
						"          Title as string,",
						"          Vintage as string,",
						"          Variety as string,",
						"          Score as string,",
						"          ListPrice as string,",
						"          Quantity as string",
						"     ),",
						"     rowUrlColumn:'FileName',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkCSVCleansedCeleste"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/fl_RemoveZeroValues')]",
				"[concat(variables('factoryId'), '/datasets/abs_csv_raw_celeste_ex3')]",
				"[concat(variables('factoryId'), '/datasets/abs_csv_cleansed_celeste_ex3')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Copy_RawToCleansed_Sales_Celesete_ex5')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Practice/05. Exercise"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "abs_csv_raw_celeste_ex3",
								"type": "DatasetReference"
							},
							"name": "SourceCSVCeleste"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "abs_csv_cleansed_celeste_ex3",
								"type": "DatasetReference"
							},
							"name": "sinkCSVCleansedCeleste"
						},
						{
							"dataset": {
								"referenceName": "abs_csv_cleansed_celeste_errorrows_ex5",
								"type": "DatasetReference"
							},
							"name": "sinkErrorLog"
						}
					],
					"transformations": [
						{
							"name": "RemoveZeroValues",
							"flowlet": {
								"referenceName": "fl_RemoveZeroValues",
								"type": "DataFlowReference",
								"parameters": {}
							}
						},
						{
							"name": "filtersummaryLine"
						},
						{
							"name": "AggregateDailySales"
						},
						{
							"name": "AddFileNameColumn"
						},
						{
							"name": "CheckSalesRegion"
						},
						{
							"name": "AddErrorRow"
						},
						{
							"name": "splitCleanandErrorRows"
						},
						{
							"name": "addErrorFileName"
						}
					],
					"scriptLines": [
						"source(output(",
						"          TransactionId as string,",
						"          TransactionDate as string,",
						"          OnlineRetailer as string,",
						"          SalesMonth as string,",
						"          SalesRegion as string,",
						"          SalesCurrency as string,",
						"          Title as string,",
						"          Vintage as string,",
						"          Variety as string,",
						"          Score as string,",
						"          ListPrice as string,",
						"          Quantity as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SourceCSVCeleste",
						"AggregateDailySales compose(mapColumn(",
						"          OnlineRetailer,",
						"          SalesMonth,",
						"          SalesRegion,",
						"          SalesCurrency,",
						"          Title,",
						"          Vintage,",
						"          Variety,",
						"          Score,",
						"          ListPrice,",
						"          Quantity,",
						"          FileName",
						"     ),",
						"     composition: 'fl_RemoveZeroValues') ~> RemoveZeroValues@(outputCSVCleansedCeleste)",
						"AddFileNameColumn filter(left(TransactionDate,21) != 'Total Sales Quantity:') ~> filtersummaryLine",
						"filtersummaryLine aggregate(groupBy(OnlineRetailer,",
						"          SalesMonth,",
						"          SalesRegion,",
						"          SalesCurrency,",
						"          Title,",
						"          Vintage,",
						"          Variety,",
						"          Score,",
						"          ListPrice,",
						"          FileName),",
						"     Quantity = sum(toInteger(Quantity))) ~> AggregateDailySales",
						"SourceCSVCeleste derive(FileName = concat(OnlineRetailer, '_', substring(SalesMonth, 1, 4), '_',substring(SalesMonth, 6, 2))) ~> AddFileNameColumn",
						"RemoveZeroValues@outputCSVCleansedCeleste assert(expectTrue(or(SalesRegion == 'EU', SalesRegion == 'UK'), false, 'assertSalesRegion')) ~> CheckSalesRegion",
						"CheckSalesRegion derive(IsErrorRow = isError(),",
						"          hasErrorRow = hasError('assertSalesRegion')) ~> AddErrorRow",
						"AddErrorRow split(IsErrorRow == false(),",
						"     disjoint: false) ~> splitCleanandErrorRows@(CleanRows, ErrorRows)",
						"splitCleanandErrorRows@ErrorRows derive(ErrorFileName = concat('Error', FileName)) ~> addErrorFileName",
						"splitCleanandErrorRows@CleanRows sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          OnlineRetailer as string,",
						"          SalesMonth as string,",
						"          Title as string,",
						"          Vintage as string,",
						"          Variety as string,",
						"          Score as string,",
						"          ListPrice as string,",
						"          Quantity as string",
						"     ),",
						"     rowUrlColumn:'FileName',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          OnlineRetailer,",
						"          SalesMonth,",
						"          Title,",
						"          Vintage,",
						"          Variety,",
						"          Score,",
						"          ListPrice,",
						"          Quantity",
						"     )) ~> sinkCSVCleansedCeleste",
						"addErrorFileName sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          OnlineRetailer as string,",
						"          SalesMonth as string,",
						"          Title as string,",
						"          Vintage as string,",
						"          Variety as string,",
						"          Score as string,",
						"          ListPrice as string,",
						"          Quantity as string",
						"     ),",
						"     rowUrlColumn:'ErrorFileName',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkErrorLog"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/fl_RemoveZeroValues')]",
				"[concat(variables('factoryId'), '/datasets/abs_csv_raw_celeste_ex3')]",
				"[concat(variables('factoryId'), '/datasets/abs_csv_cleansed_celeste_ex3')]",
				"[concat(variables('factoryId'), '/datasets/abs_csv_cleansed_celeste_errorrows_ex5')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Copy_RawToCleansed_Sales_Celesete_ex6')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Practice"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "abs_csv_raw_celeste_ex3",
								"type": "DatasetReference"
							},
							"name": "SourceCSVCeleste"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "abs_csv_cleansed_celeste_ex3",
								"type": "DatasetReference"
							},
							"name": "sinkCSVCleansedCeleste"
						},
						{
							"dataset": {
								"referenceName": "abs_csv_cleansed_celeste_errorrows_ex5",
								"type": "DatasetReference"
							},
							"name": "sinkErrorLog"
						}
					],
					"transformations": [
						{
							"name": "RemoveZeroValues",
							"flowlet": {
								"referenceName": "fl_RemoveZeroValues",
								"type": "DataFlowReference",
								"parameters": {}
							}
						},
						{
							"name": "filtersummaryLine"
						},
						{
							"name": "AggregateDailySales"
						},
						{
							"name": "AddFileNameColumn"
						},
						{
							"name": "CheckSalesRegion"
						},
						{
							"name": "AddErrorRow"
						},
						{
							"name": "splitCleanandErrorRows"
						},
						{
							"name": "addErrorFileName"
						}
					],
					"scriptLines": [
						"source(output(",
						"          TransactionId as string,",
						"          TransactionDate as string,",
						"          OnlineRetailer as string,",
						"          SalesMonth as string,",
						"          SalesRegion as string,",
						"          SalesCurrency as string,",
						"          Title as string,",
						"          Vintage as string,",
						"          Variety as string,",
						"          Score as string,",
						"          ListPrice as string,",
						"          Quantity as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SourceCSVCeleste",
						"AggregateDailySales compose(mapColumn(",
						"          OnlineRetailer,",
						"          SalesMonth,",
						"          SalesRegion,",
						"          SalesCurrency,",
						"          Title,",
						"          Vintage,",
						"          Variety,",
						"          Score,",
						"          ListPrice,",
						"          Quantity,",
						"          FileName",
						"     ),",
						"     composition: 'fl_RemoveZeroValues') ~> RemoveZeroValues@(outputCSVCleansedCeleste)",
						"AddFileNameColumn filter(left(TransactionDate,21) != 'Total Sales Quantity:') ~> filtersummaryLine",
						"filtersummaryLine aggregate(groupBy(OnlineRetailer,",
						"          SalesMonth,",
						"          SalesRegion,",
						"          SalesCurrency,",
						"          Title,",
						"          Vintage,",
						"          Variety,",
						"          Score,",
						"          ListPrice,",
						"          FileName),",
						"     Quantity = sum(toInteger(Quantity))) ~> AggregateDailySales",
						"SourceCSVCeleste derive(FileName = concat(OnlineRetailer, '_', substring(SalesMonth, 1, 4), '_',substring(SalesMonth, 6, 2))) ~> AddFileNameColumn",
						"RemoveZeroValues@outputCSVCleansedCeleste assert(expectTrue(or(SalesRegion == 'EU', SalesRegion == 'UK'), false, 'assertSalesRegion')) ~> CheckSalesRegion",
						"CheckSalesRegion derive(IsErrorRow = isError(),",
						"          hasErrorRow = hasError('assertSalesRegion')) ~> AddErrorRow",
						"AddErrorRow split(IsErrorRow == false(),",
						"     disjoint: false) ~> splitCleanandErrorRows@(CleanRows, ErrorRows)",
						"splitCleanandErrorRows@ErrorRows derive(ErrorFileName = concat('Error', FileName)) ~> addErrorFileName",
						"splitCleanandErrorRows@CleanRows sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          OnlineRetailer as string,",
						"          SalesMonth as string,",
						"          Title as string,",
						"          Vintage as string,",
						"          Variety as string,",
						"          Score as string,",
						"          ListPrice as string,",
						"          Quantity as string",
						"     ),",
						"     rowUrlColumn:'FileName',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          OnlineRetailer,",
						"          SalesMonth,",
						"          Title,",
						"          Vintage,",
						"          Variety,",
						"          Score,",
						"          ListPrice,",
						"          Quantity",
						"     )) ~> sinkCSVCleansedCeleste",
						"addErrorFileName sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          OnlineRetailer as string,",
						"          SalesMonth as string,",
						"          Title as string,",
						"          Vintage as string,",
						"          Variety as string,",
						"          Score as string,",
						"          ListPrice as string,",
						"          Quantity as string",
						"     ),",
						"     rowUrlColumn:'ErrorFileName',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkErrorLog"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/fl_RemoveZeroValues')]",
				"[concat(variables('factoryId'), '/datasets/abs_csv_raw_celeste_ex3')]",
				"[concat(variables('factoryId'), '/datasets/abs_csv_cleansed_celeste_ex3')]",
				"[concat(variables('factoryId'), '/datasets/abs_csv_cleansed_celeste_errorrows_ex5')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_build_dimProduct')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Practice"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "sql_stage_product_table",
								"type": "DatasetReference"
							},
							"name": "stageProduct"
						},
						{
							"dataset": {
								"referenceName": "ProductDimension",
								"type": "DatasetReference"
							},
							"name": "sourceDimProduct"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "dimProduct",
								"type": "DatasetReference"
							},
							"name": "InsertNewProducts"
						},
						{
							"dataset": {
								"referenceName": "dimProduct",
								"type": "DatasetReference"
							},
							"name": "setInactiveProduct"
						},
						{
							"dataset": {
								"referenceName": "ProductDimension",
								"type": "DatasetReference"
							},
							"name": "setActiveRows"
						}
					],
					"transformations": [
						{
							"name": "activeDimProduct"
						},
						{
							"name": "newAndOldProduct"
						},
						{
							"name": "newProducts"
						},
						{
							"name": "setNewRecordFields"
						},
						{
							"name": "Type2ChangeExists"
						},
						{
							"name": "setInactiveRow"
						},
						{
							"name": "setInactiveRowUpdates"
						},
						{
							"name": "flagUpdates"
						},
						{
							"name": "setActiveRow"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ProductNo as string,",
						"          Country as string,",
						"          Score as string,",
						"          DealerPrice as integer,",
						"          Markup as double,",
						"          ListPrice as integer,",
						"          Province as string,",
						"          Region_1 as string,",
						"          Title as string,",
						"          Vintage as integer,",
						"          Varietal as string,",
						"          Winery as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> stageProduct",
						"source(output(",
						"          ProductId as integer,",
						"          ProductNo as string,",
						"          ProductName as string,",
						"          Province as string,",
						"          Region as string,",
						"          Type as string,",
						"          Winery as string,",
						"          Vintage as integer,",
						"          Score as integer,",
						"          DealerPrice as integer,",
						"          Markup as double,",
						"          ListPrice as integer,",
						"          UpdatedDate as timestamp,",
						"          IsRowCurrent as integer,",
						"          EffectiveDate as timestamp,",
						"          EndDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> sourceDimProduct",
						"sourceDimProduct filter(IsRowCurrent == 1) ~> activeDimProduct",
						"stageProduct, activeDimProduct join(stageProduct@ProductNo == sourceDimProduct@ProductNo,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> newAndOldProduct",
						"newAndOldProduct split(isNull(sourceDimProduct@ProductNo),",
						"     stageProduct@ProductNo == sourceDimProduct@ProductNo && toInteger(stageProduct@Score) == sourceDimProduct@Score,",
						"     disjoint: false) ~> newProducts@(NewProducts, NoUpdateProducts, UpdateProducts)",
						"newProducts@NewProducts derive(UpdatedDate = currentTimestamp(),",
						"          IsRowCurrent = 1,",
						"          EffectiveDate = currentTimestamp(),",
						"          EndDate = toDate('2099-12-31')) ~> setNewRecordFields",
						"newProducts@UpdateProducts, activeDimProduct exists(equals(newProducts@UpdateProducts@ProductNo, sourceDimProduct@ProductNo) &&\r",
						"(toInteger(newProducts@UpdateProducts@Score) != sourceDimProduct@Score),",
						"     negate:false,",
						"     broadcast: 'auto')~> Type2ChangeExists",
						"Type2ChangeExists derive(IsRowCurrent = 0,",
						"          EndDate = currentTimestamp(),",
						"          ProductId = ProductId) ~> setInactiveRow",
						"setInactiveRow select(mapColumn(",
						"          ProductId,",
						"          IsRowCurrent,",
						"          EndDate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> setInactiveRowUpdates",
						"setInactiveRowUpdates alterRow(updateIf(true())) ~> flagUpdates",
						"newProducts@UpdateProducts derive(isRowCurrent = 1,",
						"          EffectiveDate = currentTimestamp(),",
						"          EndDate = currentTimestamp()) ~> setActiveRow",
						"setNewRecordFields sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ProductId as integer,",
						"          ProductNo as string,",
						"          ProductName as string,",
						"          Province as string,",
						"          Region as string,",
						"          Type as string,",
						"          Winery as string,",
						"          Vintage as integer,",
						"          Score as integer,",
						"          DealerPrice as integer,",
						"          Markup as double,",
						"          ListPrice as integer,",
						"          UpdatedDate as timestamp,",
						"          IsRowCurrent as integer,",
						"          EffectiveDate as timestamp,",
						"          EndDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ProductNo = newProducts@NewProducts@ProductNo,",
						"          ProductName = Title,",
						"          Province = newProducts@NewProducts@Province,",
						"          Region = Region_1,",
						"          Type = Varietal,",
						"          Winery = newProducts@NewProducts@Winery,",
						"          Vintage = newProducts@NewProducts@Vintage,",
						"          Score = newProducts@NewProducts@Score,",
						"          DealerPrice = newProducts@NewProducts@DealerPrice,",
						"          Markup = newProducts@NewProducts@Markup,",
						"          ListPrice = newProducts@NewProducts@ListPrice,",
						"          UpdatedDate,",
						"          IsRowCurrent,",
						"          EffectiveDate,",
						"          EndDate",
						"     )) ~> InsertNewProducts",
						"flagUpdates sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ProductId as integer,",
						"          ProductNo as string,",
						"          ProductName as string,",
						"          Province as string,",
						"          Region as string,",
						"          Type as string,",
						"          Winery as string,",
						"          Vintage as integer,",
						"          Score as integer,",
						"          DealerPrice as integer,",
						"          Markup as double,",
						"          ListPrice as integer,",
						"          UpdatedDate as timestamp,",
						"          IsRowCurrent as integer,",
						"          EffectiveDate as timestamp,",
						"          EndDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['ProductId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ProductId,",
						"          IsRowCurrent,",
						"          EndDate",
						"     )) ~> setInactiveProduct",
						"setActiveRow sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ProductId as integer,",
						"          ProductNo as string,",
						"          ProductName as string,",
						"          Province as string,",
						"          Region as string,",
						"          Type as string,",
						"          Winery as string,",
						"          Vintage as integer,",
						"          Score as integer,",
						"          DealerPrice as integer,",
						"          Markup as double,",
						"          ListPrice as integer,",
						"          UpdatedDate as timestamp,",
						"          IsRowCurrent as integer,",
						"          EffectiveDate as timestamp,",
						"          EndDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ProductNo = newProducts@UpdateProducts@ProductNo,",
						"          ProductName,",
						"          Province = newProducts@UpdateProducts@Province,",
						"          Region = Region_1,",
						"          Type,",
						"          Winery = newProducts@UpdateProducts@Winery,",
						"          Vintage = newProducts@UpdateProducts@Vintage,",
						"          Score = newProducts@UpdateProducts@Score,",
						"          DealerPrice = newProducts@UpdateProducts@DealerPrice,",
						"          Markup = newProducts@UpdateProducts@Markup,",
						"          ListPrice = newProducts@UpdateProducts@ListPrice,",
						"          UpdatedDate,",
						"          IsRowCurrent = setActiveRow@isRowCurrent,",
						"          EffectiveDate,",
						"          EndDate",
						"     )) ~> setActiveRows"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/sql_stage_product_table')]",
				"[concat(variables('factoryId'), '/datasets/ProductDimension')]",
				"[concat(variables('factoryId'), '/datasets/dimProduct')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_build_region')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "fin_region"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "sql_stage_region",
								"type": "DatasetReference"
							},
							"name": "finStageRegion"
						},
						{
							"dataset": {
								"referenceName": "SQLDimRegion",
								"type": "DatasetReference"
							},
							"name": "finDimRegion"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SQLDimRegion",
								"type": "DatasetReference"
							},
							"name": "dimRegion"
						}
					],
					"transformations": [
						{
							"name": "checkRegionExists"
						},
						{
							"name": "setInsertUpdateDates"
						},
						{
							"name": "updateOrInsert"
						}
					],
					"scriptLines": [
						"source(output(",
						"          region_id as integer,",
						"          city as string,",
						"          country as string,",
						"          territory as string,",
						"          {full name} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> finStageRegion",
						"source(output(",
						"          region_surr_id as integer,",
						"          region_id as integer,",
						"          city as string,",
						"          country as string,",
						"          territory as string,",
						"          {full name} as string,",
						"          InsertedDate as timestamp,",
						"          UpdatedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> finDimRegion",
						"finStageRegion, finDimRegion lookup(finStageRegion@region_id == finDimRegion@region_id,",
						"     multiple: true,",
						"     broadcast: 'auto')~> checkRegionExists",
						"checkRegionExists derive(InsertedDate = iif(isNull(InsertedDate), currentTimestamp(), InsertedDate),",
						"          UpdatedDate = currentTimestamp()) ~> setInsertUpdateDates",
						"setInsertUpdateDates alterRow(upsertIf(true())) ~> updateOrInsert",
						"updateOrInsert sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          region_surr_id as integer,",
						"          region_id as integer,",
						"          city as string,",
						"          country as string,",
						"          territory as string,",
						"          {full name} as string,",
						"          InsertedDate as timestamp,",
						"          UpdatedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['region_id'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          region_id = finStageRegion@region_id,",
						"          city = finStageRegion@city,",
						"          country = finStageRegion@country,",
						"          territory = finStageRegion@territory,",
						"          {full name} = finStageRegion@{full name},",
						"          InsertedDate,",
						"          UpdatedDate",
						"     )) ~> dimRegion"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/sql_stage_region')]",
				"[concat(variables('factoryId'), '/datasets/SQLDimRegion')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_finproductsDim')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "fin_staging_products",
								"type": "DatasetReference"
							},
							"name": "sourceProducts"
						},
						{
							"dataset": {
								"referenceName": "fin_dim_products",
								"type": "DatasetReference"
							},
							"name": "dimProducts"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "fin_dim_products",
								"type": "DatasetReference"
							},
							"name": "sinkDimProducts"
						},
						{
							"dataset": {
								"referenceName": "fin_dim_products",
								"type": "DatasetReference"
							},
							"name": "sinkActiveRecords"
						},
						{
							"dataset": {
								"referenceName": "fin_dim_products",
								"type": "DatasetReference"
							},
							"name": "sinkDimFinProducts"
						}
					],
					"transformations": [
						{
							"name": "checkProducts"
						},
						{
							"name": "NewandOldProducts"
						},
						{
							"name": "filterActive"
						},
						{
							"name": "newProductscolumns"
						},
						{
							"name": "Type2ChangeExists"
						},
						{
							"name": "setinactive"
						},
						{
							"name": "setInactiveRowUpdates"
						},
						{
							"name": "flagUpdates"
						},
						{
							"name": "setActiveRow"
						},
						{
							"name": "typ2changeinsert"
						}
					],
					"scriptLines": [
						"source(output(",
						"          product_id as integer,",
						"          product_name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> sourceProducts",
						"source(output(",
						"          product_id as integer,",
						"          product_no as integer,",
						"          product_name as string,",
						"          UpdatedDate as timestamp,",
						"          IsRowCurrent as boolean,",
						"          EffectiveDate as timestamp,",
						"          EndDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> dimProducts",
						"sourceProducts, filterActive join(sourceProducts@product_id == product_no,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> checkProducts",
						"checkProducts split(isNull(product_no),",
						"     disjoint: false) ~> NewandOldProducts@(NewProducts, Existing)",
						"dimProducts filter(IsRowCurrent == true()) ~> filterActive",
						"NewandOldProducts@NewProducts derive(UpdatedDate = currentTimestamp(),",
						"          IsRowCurrent = 1,",
						"          EffectiveDate = currentTimestamp(),",
						"          EndDate = toDate('2025-12-31')) ~> newProductscolumns",
						"NewandOldProducts@Existing, filterActive exists(equals(NewandOldProducts@Existing@product_no,dimProducts@product_no) &&\r",
						"(NewandOldProducts@Existing@product_name != dimProducts@product_name),",
						"     negate:false,",
						"     broadcast: 'left')~> Type2ChangeExists",
						"Type2ChangeExists derive(IsRowCurrent = false(),",
						"          EndDate = currentTimestamp(),",
						"          product_id = NewandOldProducts@Existing@product_id) ~> setinactive",
						"setinactive select(mapColumn(",
						"          product_id,",
						"          UpdatedDate,",
						"          IsRowCurrent,",
						"          EffectiveDate,",
						"          EndDate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> setInactiveRowUpdates",
						"setInactiveRowUpdates alterRow(updateIf(true())) ~> flagUpdates",
						"typ2changeinsert derive(IsRowCurrent = 1,",
						"          EffectiveDate = currentTimestamp()) ~> setActiveRow",
						"NewandOldProducts@Existing, filterActive exists(equals(NewandOldProducts@Existing@product_no,dimProducts@product_no) &&",
						"(NewandOldProducts@Existing@product_name != dimProducts@product_name),",
						"     negate:false,",
						"     broadcast: 'left')~> typ2changeinsert",
						"newProductscolumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          product_id as integer,",
						"          product_no as integer,",
						"          product_name as string,",
						"          UpdatedDate as timestamp,",
						"          IsRowCurrent as boolean,",
						"          EffectiveDate as timestamp,",
						"          EndDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          product_no = NewandOldProducts@NewProducts@product_id,",
						"          product_name = NewandOldProducts@NewProducts@product_name,",
						"          UpdatedDate,",
						"          IsRowCurrent,",
						"          EffectiveDate,",
						"          EndDate",
						"     )) ~> sinkDimProducts",
						"setActiveRow sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          product_id as integer,",
						"          product_no as integer,",
						"          product_name as string,",
						"          UpdatedDate as timestamp,",
						"          IsRowCurrent as boolean,",
						"          EffectiveDate as timestamp,",
						"          EndDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          product_no,",
						"          product_name = NewandOldProducts@Existing@product_name,",
						"          UpdatedDate,",
						"          IsRowCurrent,",
						"          EffectiveDate,",
						"          EndDate",
						"     )) ~> sinkActiveRecords",
						"flagUpdates sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          product_id as integer,",
						"          product_no as integer,",
						"          product_name as string,",
						"          UpdatedDate as timestamp,",
						"          IsRowCurrent as boolean,",
						"          EffectiveDate as timestamp,",
						"          EndDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['product_id'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          product_id,",
						"          IsRowCurrent,",
						"          EffectiveDate,",
						"          EndDate",
						"     )) ~> sinkDimFinProducts"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/fin_staging_products')]",
				"[concat(variables('factoryId'), '/datasets/fin_dim_products')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_products_staging_sink')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "fin_products"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "productSource",
								"type": "DatasetReference"
							},
							"name": "dimProductSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "fin_staging_products",
								"type": "DatasetReference"
							},
							"name": "stageProductSink"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          Index as string,",
						"          {Product Name} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> dimProductSource",
						"dimProductSource sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          product_id as integer,",
						"          product_name as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          product_id = Index,",
						"          product_name = {Product Name}",
						"     )) ~> stageProductSink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/productSource')]",
				"[concat(variables('factoryId'), '/datasets/fin_staging_products')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/finRegionStagingPipeline')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "fin_region"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "finRegionSourceExcel",
								"type": "DatasetReference"
							},
							"name": "finRegionSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "finRegionStageSQL",
								"type": "DatasetReference"
							},
							"name": "finRegionstaging"
						}
					],
					"transformations": [
						{
							"name": "finRegionCountryCorrecting"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Index as short,",
						"          City as string,",
						"          Country as string,",
						"          Territory as string,",
						"          {Full Name} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> finRegionSource",
						"finRegionSource derive(Country = iif(Country == 'Ausstralia', 'Australia',Country)) ~> finRegionCountryCorrecting",
						"finRegionCountryCorrecting sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          region_id as integer,",
						"          city as string,",
						"          country as string,",
						"          territory as string,",
						"          {full name} as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          region_id = Index,",
						"          city = City,",
						"          country = Country,",
						"          territory = Territory,",
						"          {full name} = {Full Name}",
						"     )) ~> finRegionstaging"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/finRegionSourceExcel')]",
				"[concat(variables('factoryId'), '/datasets/finRegionStageSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/fl_RemoveZeroValues')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Practice/04. Exercise"
				},
				"type": "Flowlet",
				"typeProperties": {
					"sources": [],
					"sinks": [],
					"transformations": [
						{
							"name": "RemoveZeroValues"
						},
						{
							"name": "SourceCSVCeleste"
						},
						{
							"name": "outputCSVCleansedCeleste"
						}
					],
					"scriptLines": [
						"input(output(",
						"          OnlineRetailer as string,",
						"          SalesMonth as string,",
						"          SalesRegion as string,",
						"          SalesCurrency as string,",
						"          Title as string,",
						"          Vintage as string,",
						"          Variety as string,",
						"          Score as string,",
						"          ListPrice as string,",
						"          Quantity as long,",
						"          FileName as string",
						"     ),",
						"     order: 0,",
						"     allowSchemaDrift: false) ~> SourceCSVCeleste",
						"SourceCSVCeleste filter(Quantity != 0) ~> RemoveZeroValues",
						"RemoveZeroValues output() ~> outputCSVCleansedCeleste"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/flowlet1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Practice/04. Exercise"
				},
				"type": "Flowlet",
				"typeProperties": {
					"sources": [],
					"sinks": [],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "input1"
						},
						{
							"name": "output1"
						}
					],
					"scriptLines": [
						"input(output(",
						"          PostalCode as string",
						"     ),",
						"     order: 0,",
						"     allowSchemaDrift: true) ~> input1",
						"input1 derive(PostalCode = lpad(PostalCode, 6, '0')) ~> derivedColumn1",
						"derivedColumn1 output() ~> output1"
					]
				}
			},
			"dependsOn": []
		}
	]
}